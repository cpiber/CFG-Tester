{"version":3,"sources":["App/Body/GrammarOutput.module.scss","App/Logic/querys.ts","App/Logic/util.ts","App/Body/GrammarOutput.tsx","App/Logic/set.ts","App/Logic/sharedgrammar.ts","App/Logic/fcsgrammar.ts","App/Body/Textarea.tsx","App/Body/RulesInput.tsx","App/Body/TextInput.tsx","App/Body/Body.tsx","App/Footer/Footer.tsx","App/Header/Header.tsx","App/App.tsx","serviceWorker.js","index.js","App/Body/bodyComponent.module.scss","App/Body/textarea.module.scss","App/Body/Body.module.scss"],"names":["module","exports","Query","createContainer","initialQuery","parse","query","parsed","queryString","rules","input","useState","state","setState","undefined","grammar","setGrammar","setRules","useCallback","nr","setInput","ni","updateQuery","useEffect","update","window","location","hash","addEventListener","removeEventListener","timeout","useRef","current","setTimeout","stringify","clearTimeout","clamp","val","min","max","Math","NUM_KEY","n","localStorage","getItem","GrammarOutput","className","useContainer","Set","strings","setStrings","buttonDisabled","setButtonDisabled","number","setNumber","status","setStatus","grammarUpdated","checkValid","clear","err","stringEls","useMemo","values","map","str","ind","toString","split","key","textarea","area","stylesBody","title","styles","onClick","e","target","tagName","blur","checkClick","i","hasWarn","next","Error","message","add","disabled","type","size","value","onChange","setItem","Symbol","iterator","toStringTag","ComparableSet","Map","this","set","delete","callbackfn","thisArg","forEach","v","_","__","has","t","f","branchMatch","escapeMatch","escapeNewline","GSymbol","symbol","NonTerminal","other","Terminal","EmptySymbol","QueueElement","rule","before","depth","nonTerminals","ParseState","left","after","origin","r","prev","cur","reduce","ruleMatchFCS","nonTerminalMatchFCS","FCSGrammar","lines","sym","parseRules","parseNonTerminals","length","line","match","lineToError","toBranches","branchToTerminal","push","j","branch","newbranch","lastIndex","exec","substring","index","string","unescape","replace","console","error","indexOf","initGenerator","gen","maxDepth","maxNonTerms","maxIter","findIndex","s","l","trim","slice","newline","bmatch","prep","newbranches","startsym","generator","g","iterSinceYield","queue","shift","expandTerminal","expandNonTerminal","applicable","nrule","top","topc","k","isFinished","completer","isNonTerminal","predictor","isTerminal","scanner","ns","equals","nextInRule","nsym","nrul","Textarea","id","placeholder","aria","children","id_","uniqueString","htmlFor","draggable","RulesInput","loadRules","TextInput","res","matches","Body","grid","Provider","initialState","rightTop","rightBottom","Footer","year","Date","getFullYear","beginyear","process","author","source","Fragment","href","rel","Header","App","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.def04d49.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"strings\":\"GrammarOutput_strings__syveZ\"};","import queryString from 'query-string';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { createContainer } from 'unstated-next';\nimport type { Grammar } from './sharedgrammar';\n\ndeclare global {\n  interface Window {\n    grammar: Grammar | undefined;\n  }\n}\n\nconst useQuery = (initialQuery = \"\") => {\n  const parse = (query: string) => {\n    const parsed = queryString.parse(query);\n    const nr = typeof(parsed.rules) === \"string\" ? parsed.rules : \"\";\n    const ni = typeof(parsed.input) === \"string\" ? parsed.input : \"\";\n    return { rules: nr, input: ni };\n  };\n\n  const [state, setState] = useState(parse(initialQuery));\n  const [grammar, setGrammar] = useState(undefined as Grammar | undefined);\n\n  const setRules = useCallback((nr: string) => setState({ ...state, rules: nr }), [state, setState]);\n  const setInput = useCallback((ni: string) => setState({ ...state, input: ni }), [state, setState]);\n  const updateQuery = useCallback((query: string) => setState(parse(query)), [setState]);\n\n  // detect hash changes, cleanup listener on unmount\n  useEffect(() => {\n    const update = () => updateQuery(window.location.hash);\n    window.addEventListener('hashchange', update);\n    return () => window.removeEventListener('hashchange', update);\n  }, [updateQuery]);\n  \n  // reflect changes in hash, debounce\n  const timeout = useRef(0);\n  useEffect(() => {\n    timeout.current = window.setTimeout(() => window.location.hash = queryString.stringify(state), 100);\n    return () => window.clearTimeout(timeout.current);\n  }, [state]);\n\n  useEffect(() => {\n    window.grammar = grammar;\n  }, [grammar]);\n\n  return { ...state, setRules, setInput, grammar, setGrammar, updateQuery };\n};\n\nconst Query = createContainer(useQuery);\nexport default Query;","export const clamp = (val: number, min: number, max: number) => Math.min(Math.max(val, min), max);","import React, { useEffect, useMemo, useState } from 'react';\nimport Query from '../Logic/querys';\nimport type { Grammar } from '../Logic/sharedgrammar';\nimport { clamp } from '../Logic/util';\nimport stylesBody from './bodyComponent.module.scss';\nimport styles from './GrammarOutput.module.scss';\nimport textarea from './textarea.module.scss';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst NUM_KEY = 'cfg_gen_number';\nconst n_min = 1;\nconst n_max = 999;\nconst n = clamp(+(window.localStorage.getItem(NUM_KEY) || 15), n_min, n_max);\n\nconst checkClick = (e: React.MouseEvent, grammar: Grammar | undefined): grammar is Grammar => {\n  if (!e.target) return false;\n  const target = e.target as HTMLElement;\n  \n  if (target.tagName === \"INPUT\") return false;\n  target.blur();\n\n  if (!grammar) return false;\n\n  return true;\n};\n\nconst GrammarOutput = ({ className }: Props) => {\n  const { grammar } = Query.useContainer();\n  const [ strings, setStrings ] = useState(new Set<string>());\n  const [ buttonDisabled, setButtonDisabled ] = useState(false);\n  const [ number, setNumber ] = useState(n);\n  const [ status, setStatus ] = useState([\"\",\"\"]);\n\n  const clickGenerate = (e: React.MouseEvent) => {\n    if (!checkClick(e, grammar))\n      return;\n\n    setButtonDisabled(true);\n    setStatus([\"\", \"\"]);\n\n    let hasWarn = false;\n    let i;\n    for (i = 0; i < number; i++) {\n      const str = grammar.next();\n      if (str === undefined)\n        break;\n      if (str instanceof Error) {\n        hasWarn = true;\n        setStatus([\"warn\", str.message]);\n        break;\n      }\n      strings.add(str);\n    }\n    setStrings(new Set(strings));\n\n    if (i < number && !hasWarn) {\n      setStatus([\"info\", \"Grammmar exhausted\"]);\n      return;\n    }\n    setButtonDisabled(false);\n  };\n\n  const clickClear = (e: React.MouseEvent) => {\n    if (!e.target) return;\n    (e.target as HTMLElement).blur();\n\n    grammarUpdated();\n  };\n\n  const updateNum = (e: React.ChangeEvent) => {\n    const val = clamp(+(e.target as HTMLInputElement).value, n_min, n_max);\n    setNumber(val);\n    window.localStorage.setItem(NUM_KEY, val.toString());\n  };\n\n  const grammarUpdated = () => {\n    setStrings(new Set());\n\n    try {\n      grammar?.checkValid();\n      grammar?.clear();\n      setButtonDisabled(false);\n      setStatus([\"\", \"\"]);\n    } catch (err) {\n      setButtonDisabled(true);\n      setStatus([\"error\", `${err}`]);\n    }\n  };\n  useEffect(grammarUpdated, [grammar]);\n\n  const stringEls = useMemo(() => [...strings.values()].map((str, ind) => (\n    <li key={ind} className=\"monospace\">\n      {str.toString().split(/\\r\\n|\\r|\\n|\\\\n/g).map((val, key) => (\n        <span key={key}>{val}</span>\n      ))}\n    </li>\n  )), [strings]);\n  \n  return (\n    <div\n      className={`${className || ''} status-${status[0]} App-bodyComponent`}\n    >\n      <div className={`${textarea.area} ${stylesBody.textarea}`}>\n        <h2 className={textarea.title}>Strings</h2>\n        <div className={styles.strings}>\n          <ul>\n            {stringEls}\n          </ul>\n        </div>\n        <div className=\"children\">\n          <div className=\"row1\">\n            <span className=\"status\">\n              {status[1]}\n            </span>\n          </div>\n          <div className=\"row2\">\n            <button\n              className=\"button secondary\"\n              onClick={clickGenerate}\n              disabled={buttonDisabled}\n              aria-label=\"Get more strings\"\n            >\n              Get <input\n                type=\"number\"\n                className=\"input secondary_alt\"\n                size={3}\n                value={number}\n                onChange={updateNum}\n                aria-label=\"Number of strings to get\"\n                /> more\n            </button>\n            <button\n              className=\"button secondary\"\n              onClick={clickClear}\n              aria-label=\"Clear strings\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\nexport default GrammarOutput;","export interface Comparable {\n  hash(): string;\n}\n\nclass ComparableSet<V extends Comparable> implements Set<V> {\n  private map: Map<string, V> = new Map();\n\n  get size() {\n    return this.map.size;\n  }\n  add(value: V): this {\n    this.map.set(value.hash(), value);\n    return this;\n  }\n  delete(value: V): boolean {\n    return this.map.delete(value.hash());\n  }\n  forEach(callbackfn: (value: V, value2: V, set: Set<V>) => void, thisArg?: any): void {\n    this.map.forEach((v, _, __) => callbackfn(v, v, this), thisArg);\n  }\n  has(value: V): boolean {\n    return this.map.has(value.hash());\n  }\n  entries(): IterableIterator<[V, V]> {\n    const t = this;\n    return (function* () {\n      for (const [, v] of t.map) {\n        yield [v, v] as [V, V];\n      }\n      return undefined;\n    })();\n  }\n  clear() { return this.map.clear(); }\n  keys() { return this.map.values(); }\n  values() { return this.map.values(); }\n  [Symbol.iterator] = this.values;\n  [Symbol.toStringTag]: string;\n}\nexport default ComparableSet;","import ComparableSet, { Comparable } from './set';\n\nexport const branchMatch = /(\\\\*)\\|/g;\nexport const escapeMatch = /(\\\\(?:n|r|t|f))|\\\\(.)/g;\nexport const escapeNewline = /(^|[^\\\\])(\\\\\\\\)*\\\\$/g;\n\nconst EXP_DEPTH = 'cfg_maxdepth'; // to prevent infinite recursion\nconst EXP_NONTERM = 'cfg_maxnonterm'; // maximum non-terminals in a row\nconst EXP_ITER = 'cfg_iter'; // maximum iterations between yields per call\n\nabstract class GSymbol {\n  symbol: string;\n  constructor(symbol: string) {\n    this.symbol = symbol;\n  }\n\n  abstract equals(other: GSymbol): boolean;\n}\nexport class NonTerminal extends GSymbol {\n  equals(other: GSymbol): boolean {\n    return other instanceof NonTerminal && other.symbol === this.symbol;\n  }\n}\nexport class Terminal extends GSymbol {\n  equals(other: GSymbol): boolean {\n    return other instanceof Terminal && other.symbol === this.symbol;\n  }\n}\nexport class EmptySymbol extends Terminal {\n  constructor() {\n    super(\"\");\n  }\n}\n\nexport type Rule = (Terminal | NonTerminal)[];\n\nclass QueueElement {\n  rule: Rule;\n  before: string;\n  depth: number;\n  nonTerminals: number;\n  constructor(rule: Rule, before = \"\", depth = 0, nonTerminals = 0) {\n    this.rule = rule;\n    this.before = before;\n    this.depth = depth;\n    this.nonTerminals = nonTerminals;\n  }\n}\n\nclass ParseState<Sym extends Terminal | NonTerminal | undefined = Terminal | NonTerminal | undefined> implements Comparable {\n  left: NonTerminal;\n  before: Rule;\n  symbol: Sym;\n  after: Rule;\n  origin: number;\n  constructor(left: NonTerminal, before: Rule, symbol: Sym, after: Rule, origin: number) {\n    this.left = left;\n    this.before = before;\n    this.symbol = symbol;\n    this.after = after;\n    this.origin = origin;\n  }\n  isFinished(): this is ParseState<undefined> { return this.symbol === undefined || this.symbol instanceof EmptySymbol; }\n  isTerminal(): this is ParseState<Terminal> { return this.symbol instanceof Terminal; }\n  isNonTerminal(): this is ParseState<NonTerminal> { return this.symbol instanceof NonTerminal; }\n\n  hash() {\n    const r = (prev: string, cur: Terminal | NonTerminal) => prev + cur.symbol;\n    return `${this.left.symbol}→${this.before.reduce(r, '')}•${this.symbol?.symbol || ''}${this.after.reduce(r, '')},${this.origin}`;\n  }\n}\ntype ParseStateSet = ComparableSet<ParseState>[];\n\nexport abstract class Grammar {\n  private gen: Generator<string | Error, undefined, never> | undefined = undefined;\n  private maxDepth = +(window.localStorage.getItem(EXP_DEPTH) || 20);\n  private maxNonTerms = +(window.localStorage.getItem(EXP_NONTERM) || 10);\n  private maxIter = +(window.localStorage.getItem(EXP_ITER) || 5000);\n\n  protected rules: { [key: string]: Rule[] } = {};\n  abstract clear(): void;\n  abstract matches(str: string): boolean;\n  \n  next(): string | Error | undefined {\n    if (!this.gen)\n      throw new Error(\"Attempted to call .next without a generator, this should never happen!\");\n    return this.gen.next().value;\n  }\n  \n  checkValid(): void {\n    // these are internal sanity checks, they should indeed never happen ;)\n    for (const sym in this.rules) {\n      const rules = this.rules[sym];\n      for (const rule of rules) {\n        if (rule.length === 0)\n          throw new Error('Empty rule, this should never happen!');\n        if (rule.length === 1 && rule[0].symbol === '' && !(rule[0] instanceof EmptySymbol))\n          throw new Error('Empty symbol that isn\\'t an EmptySymbol, this should never happen!');\n        if (rule.length > 1 && rule.findIndex(s => s instanceof EmptySymbol || s.symbol.length === 0) !== -1)\n          throw new Error('EmptySymbol found in a longer rule, this should never happen!');\n      }\n    }\n  }\n\n  protected prepareRules(rules: string) {\n    return rules.split(/\\r\\n|\\r|\\n/g).map((l, i, lines) => {\n      const line = l.trim();\n      if (line === \"\") return null; // ignore empty lines\n      if (line.match(escapeNewline)) {\n        if (i + 1 === lines.length)\n          return line.slice(0, line.length - 1);\n        const newline = line.slice(0, line.length - 1) + lines[i + 1].trim();\n        lines[i + 1] = \"\";\n        return newline;\n      }\n      return line;\n    });\n  }\n\n  protected toBranches(branch: string, branchToTerminal: (s: string) => Terminal) {\n    const prep = (str: string) => str.trim().replace(/\\\\n/g, \"\\n\").replace(/\\\\r/g, \"\\r\").replace(/\\\\t/g, \"\\t\").replace(/\\\\f/g, \"\\f\");\n    let newbranches: Terminal[] = [],\n        bmatch: RegExpExecArray | null,\n        lastIndex = 0;\n    while ((bmatch = branchMatch.exec(branch)) !== null) {\n      // even number of backslashes means they are not\n      // escaping the |\n      if (bmatch[1].length % 2 === 0) {\n        const before = branch.substring(lastIndex, bmatch.index + bmatch[1].length);\n        newbranches.push(branchToTerminal(prep(before)));\n        lastIndex = branchMatch.lastIndex;\n      }\n    }\n    const after = branch.substring(lastIndex);\n    newbranches.push(branchToTerminal(prep(after)));\n    return newbranches;\n  }\n\n  protected initGenerator(startsym: string) {\n    const g = this;\n    let iterSinceYield = 0;\n    // search all possible paths using BFS\n    function* generator(queue: QueueElement[]): Generator<string | Error, undefined, never> {\n      let next: QueueElement | undefined;\n      while ((next = queue.shift())) {\n        iterSinceYield ++;\n        let symbol = g.expandTerminal(next);\n        const { rule, before, depth, nonTerminals } = next;\n        if (symbol === undefined) { // no more symbols to process\n          yield before;\n          iterSinceYield = 0;\n          continue;\n        }\n        if (iterSinceYield >= g.maxIter) {\n          yield new Error(`Iterated ${iterSinceYield} times without finding a new value`);\n          iterSinceYield = 0;\n        }\n        if (depth > g.maxDepth || nonTerminals > g.maxNonTerms)\n          continue;\n        g.expandNonTerminal(symbol, rule, queue, next);\n      }\n      return undefined;\n    }\n    this.gen = generator([new QueueElement([new NonTerminal(startsym)])]);\n  }\n\n  private expandTerminal(next: QueueElement) {\n    const rule = next.rule\n    let symbol = rule.shift();\n    while (symbol instanceof Terminal) { // string all terminals together\n      next.before += symbol.symbol;\n      symbol = rule.shift();\n      next.nonTerminals = 0;\n    }\n    return symbol;\n  }\n\n  private expandNonTerminal(symbol: Terminal, rule: Rule, queue: QueueElement[], next: QueueElement) {\n    const { before, depth, nonTerminals } = next;\n    // create a new branch for every possible path\n    const applicable = this.rules[symbol.symbol];\n    for (const nrule of applicable)\n      queue.push(new QueueElement([...nrule, ...rule], before, depth + 1, nonTerminals + 1));\n  }\n\n  protected match(str: string, startsym: string): boolean {\n    // https://en.wikipedia.org/wiki/Earley_parser#Pseudocode\n    const state: ParseStateSet = [];\n    state.push(new ComparableSet());\n    const top  = new ParseState(new NonTerminal(''), [], new NonTerminal(startsym), [], 0);\n    const topc = new ParseState(new NonTerminal(''), [new NonTerminal(startsym)], undefined, [], 0);\n    state[0].add(top);\n\n    // for each 'word'\n    for (let k = 0; k <= str.length; k++) { // need to finish up after the last character\n      state.push(new ComparableSet()); // k+1\n\n      for (const s of state[k]) { // state[k] can expand\n        if (s.isFinished()) {\n          this.completer(s, k, state);\n        } else if (s.isNonTerminal()) {\n          this.predictor(s, k, state);\n        } else if (s.isTerminal()) {\n          this.scanner(s, k, state, str);\n        } else {\n          throw new Error('Unknown symbol type, this should never happen!');\n        }\n      }\n    }\n\n    return state[str.length].has(topc);\n  }\n\n  private completer(s: ParseState<undefined>, k: number, state: ParseStateSet) {\n    for (const n of state[s.origin]) {\n      if (n.isFinished())\n        continue;\n      const ns = n as ParseState<Terminal | NonTerminal>;\n      if (ns.symbol.equals(s.left))\n        this.nextInRule(ns, k, state);\n    }\n  }\n\n  private predictor(s: ParseState<NonTerminal>, k: number, state: ParseStateSet) {\n    for (const rule of this.rules[s.symbol.symbol]) {\n      state[k].add(new ParseState(s.symbol, [], rule[0], rule.slice(1), k));\n    }\n  }\n\n  private scanner(s: ParseState<Terminal>, k: number, state: ParseStateSet, str: string) {\n    if (k === str.length) // nothing to scan if we're at the end of the string\n      return;\n    if (str[k] === s.symbol.symbol[0]) {\n      // need to go to next symbol in rule\n      // terminals can be multiple chars long, so pop first, otherwise go to next in rule\n      if (s.symbol.symbol.length > 1) {\n        state[k+1].add(new ParseState(s.left, [...s.before, new Terminal(s.symbol.symbol[0])], new Terminal(s.symbol.symbol.slice(1)), [...s.after], s.origin));\n      } else {\n        this.nextInRule(s, k + 1, state);\n      }\n    }\n  }\n\n  private nextInRule(n: ParseState<Terminal | NonTerminal>, k: number, state: ParseStateSet) {\n    const nsym = n.after.length >= 1 ? n.after[0] : undefined;\n    const nrul = n.after.length >= 1 ? n.after.slice(1) : [];\n    state[k].add(new ParseState(n.left, [...n.before, n.symbol], nsym, nrul, n.origin));\n  }\n}\n","import { EmptySymbol, escapeMatch, Grammar, NonTerminal, Rule, Terminal } from \"./sharedgrammar\";\n\nconst ruleMatchFCS = /^\\s*([A-Z])\\s*(?:->|→)\\s*((?:.|\\n)*)$/m;\nconst nonTerminalMatchFCS = /(\\\\*)([A-Z])/g;\n\nclass FCSGrammar extends Grammar {\n  constructor(rules: string) {\n    super();\n    const lines = super.prepareRules(rules);\n    this.parseRules(lines);\n\n    // check for non-terminals in rules\n    for (const sym in this.rules) {\n      this.parseNonTerminals(this.rules[sym]);\n    }\n  }\n\n  private parseRules(lines: (string | null)[]) {\n    // parse rules into arrays\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      if (line === null)\n        continue;\n      const match = line.match(ruleMatchFCS);\n\n      if (!match)\n        throw new Error(`Syntax error on line ${i + 1}: ${this.lineToError(line)}`);\n\n      const rules = this.toBranches(match[2], this.branchToTerminal).map(t => [t]);\n\n      if (match[1] in this.rules) {\n        this.rules[match[1]].push(...rules);\n      } else {\n        this.rules[match[1]] = rules;\n      }\n    }\n  }\n\n  private parseNonTerminals(rules: Rule[]) {\n    for (let j = 0; j < rules.length; j++) {\n      const branch = rules[j][0].symbol; // currently only 1 terminal symbol, split that\n      let match: RegExpExecArray | null,\n        newbranch: Rule = [],\n        lastIndex = 0;\n\n      while ((match = nonTerminalMatchFCS.exec(branch)) !== null) {\n        // even number of backslashes means they are not\n        // escaping the non-terminal\n        if (match[1].length % 2 === 0 && match[2] in this.rules) {\n          const before = branch.substring(lastIndex, match.index);\n          if (before !== \"\") newbranch.push(this.branchToTerminal(before, true));\n          newbranch.push(new NonTerminal(match[2]));\n          lastIndex = nonTerminalMatchFCS.lastIndex;\n        }\n      }\n      const after = branch.substring(lastIndex);\n      if (after !== \"\") newbranch.push(this.branchToTerminal(after, true));\n\n      if (!newbranch.length) newbranch.push(new EmptySymbol());\n\n      rules[j] = newbranch;\n    }\n  }\n\n  private branchToTerminal(string: string, unescape = false) {\n    return (\n      string === \"^\" || string === \"ε\" || string === \"\" ?\n        new EmptySymbol() :\n        new Terminal(unescape ? string.replace(escapeMatch, \"$1$2\") : string)\n    );\n  }\n\n  private lineToError(line: string) {\n    console.error('Error on line:', line);\n    if (line.indexOf(\"->\") === -1 && line.indexOf(\"→\") === -1)\n      return \"Rule indicator '->' missing\";\n    return \"Non-terminal symbols must be single capital letters\";\n  }\n\n  clear() {\n    this.initGenerator('S');\n  }\n\n  checkValid() {\n    super.checkValid();\n    if (!('S' in this.rules))\n      throw new Error(\"Startsymbol 'S' not found\");\n  }\n\n  matches(str: string) {\n    return super.match(str, 'S');\n  }\n}\n\nexport default FCSGrammar;","import React from 'react';\nimport uniqueString from 'unique-string';\nimport styles from './textarea.module.scss';\n\n\ninterface Props {\n  id?: string;\n  className?: string;\n  title?: string;\n  placeholder?: string;\n  onChange?: ((event: React.ChangeEvent<HTMLTextAreaElement>) => void);\n  value?: string;\n  aria?: string;\n  children?: JSX.Element[] | JSX.Element;\n}\n\nconst Textarea = ({ id, className, title, placeholder, onChange, value, aria, children }: Props) => {\n  const id_ = id || uniqueString();\n  return (\n    <div className={`${styles.area} ${className || ''}`}>\n      {title && (\n        <h2 className={styles.title}>\n          <label htmlFor={id_}>{title}</label>\n        </h2>\n      )}\n      <textarea\n        id={id_}\n        className=\"textarea monospace\"\n        onChange={onChange}\n        draggable=\"false\"\n        placeholder={typeof placeholder === \"string\" ? placeholder : \"Enter text here...\"}\n        value={value}\n        aria-label={aria}\n      ></textarea>\n      {children && (\n        <div className=\"children\">\n          {children}\n        </div>\n      )}\n    </div>\n  )\n};\nexport default Textarea;","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport FCSGrammar from '../Logic/fcsgrammar';\nimport Query from '../Logic/querys';\nimport styles from './bodyComponent.module.scss';\nimport Textarea from './Textarea';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst RulesInput = ({ className }: Props) => {\n  const { rules, setRules, setGrammar } = Query.useContainer();\n  const [ status, setStatus ] = useState([\"\",\"\"]);\n  const timeout = useRef(0);\n\n  const rulesChange = (e: React.ChangeEvent) => {\n    if (!e.target) return;\n    setRules((e.target as HTMLInputElement).value);\n  };\n\n  const clickGenerate = (e: React.MouseEvent) => {\n    if (!e.target) return;\n    (e.target as HTMLElement).blur();\n\n    loadRules();\n  };\n\n  // parse rules, debounced\n  const loadRules = useCallback(() => {\n    timeout.current = window.setTimeout(() => {\n      try {\n        setGrammar(new FCSGrammar(rules));\n        setStatus([\"ok\", \"\"]);\n      } catch (err) {\n        setStatus([\"error\",`${err}`]);\n      }\n    }, 50);\n    return () => window.clearTimeout(timeout.current);\n  }, [rules, setGrammar]);\n\n  useEffect(loadRules, [rules, loadRules]);\n\n  return (\n    <div\n      className={`${className || ''} status-${status[0]} App-bodyComponent`}\n    >\n      <Textarea\n        className={styles.textarea}\n        value={rules}\n        onChange={rulesChange}\n        title=\"Rules\"\n        aria=\"Rules that describe the grammar\"\n        placeholder=\"Enter rules here... e.g.&#10;S -> 1 | 2 | 3&#10;S -> 4 | 5 | 6\"\n      >\n        <div className=\"row1\">\n          <div className=\"status\">\n            {status[1]}\n          </div>\n        </div>\n        <div className=\"row2\">\n          <button\n            className=\"button secondary\"\n            onClick={clickGenerate}\n          >\n            Regenerate Model\n          </button>\n        </div>\n      </Textarea>\n    </div>\n  )\n};\nexport default RulesInput;","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Query from '../Logic/querys';\nimport styles from './bodyComponent.module.scss';\nimport Textarea from './Textarea';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst TextInput = ({ className }: Props) => {\n  const { input, setInput, grammar } = Query.useContainer();\n  const [ status, setStatus ] = useState([\"\", \"\"]);\n  const [ buttonDisabled, setButtonDisabled ] = useState(false);\n  const timeout = useRef(0);\n\n  const inputChange = (e: React.ChangeEvent) => {\n    if (!e.target) return;\n    setInput((e.target as HTMLInputElement).value);\n  }\n  \n  const clickMatch = (e: React.MouseEvent) => {\n    if (!e.target) return;\n    (e.target as HTMLElement).blur();\n\n    match();\n  }\n\n  // match input\n  const match = useCallback(() => {\n    try {\n      if (!grammar)\n        throw new Error('No grammar object available');\n      grammar.checkValid();\n      const res = grammar.matches(input);\n      setButtonDisabled(false);\n      setStatus([res ? 'ok' : 'error', `Input ${res ? 'matches' : 'doesn\\'t match'}`]);\n    } catch (err) {\n      setButtonDisabled(true);\n      setStatus([\"error\", `${err}`]);\n    }\n  }, [input, grammar]);\n\n  // debounce matching, on grammar or input change\n  useEffect(() => {\n    timeout.current = window.setTimeout(match, 100);\n    return () => window.clearTimeout(timeout.current);\n  }, [match]);\n\n  return (\n    <div\n      className={`${className || ''} status-${status[0]} App-bodyComponent`}\n    >\n      <Textarea\n        className={styles.textarea}\n        value={input}\n        onChange={inputChange}\n        title=\"Test Input\"\n        aria=\"Input to match with grammar\"\n      >\n        <div className=\"row1\">\n          <span className=\"status\">\n            {status[1]}\n          </span>\n        </div>\n        <div className=\"row2\">\n          <button\n            className=\"button secondary\"\n            onClick={clickMatch}\n            disabled={buttonDisabled}\n          >\n            Re-Match\n          </button>\n        </div>\n      </Textarea>\n    </div>\n  )\n};\nexport default TextInput;","import React from 'react';\nimport Query from '../Logic/querys';\nimport styles from './Body.module.scss';\nimport GrammarOutput from './GrammarOutput';\nimport RulesInput from './RulesInput';\nimport TextInput from './TextInput';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst Body = ({ className }: Props) => {\n  return (\n    <div\n      className={`${className || ''} ${styles.grid} App-body`}\n    >\n      <Query.Provider initialState={window.location.hash}>\n        <RulesInput\n          className={styles.left}\n        ></RulesInput>\n        <TextInput\n          className={styles.rightTop}\n        ></TextInput>\n        <GrammarOutput\n          className={styles.rightBottom}\n        ></GrammarOutput>\n      </Query.Provider>\n    </div>\n  )\n};\nexport default Body;","import React from 'react';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst Footer = ({ className }: Props) => {\n  const year = (new Date()).getFullYear().toString(),\n    beginyear = process.env.REACT_APP_BEGIN_YEAR,\n    author = process.env.REACT_APP_AUTHOR,\n    source = process.env.REACT_APP_GITHUB_URL,\n    divider = \" :: \";\n\n  return (\n    <footer\n      className={`${className || ''} App-footer`}\n    >\n      {!beginyear || year === beginyear ? year : `${beginyear}-${year}`}\n      {author && ` by ${author}`}\n      {source && (\n        <React.Fragment>\n          <span>{divider}</span>\n          <a href={source} target=\"_blank\" rel=\"noopener noreferrer\">Source</a>\n        </React.Fragment>\n      )}\n    </footer>\n  );\n};\nexport default Footer;","import React from 'react';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst Header = ({ className }: Props) => {\n  return (\n    <header\n      className={`${className || ''} App-header`}\n    >\n      <h1>\n        <abbr title=\"Context-free grammar\">CFG</abbr> Testing suite\n      </h1>\n    </header>\n  );\n};\nexport default Header;","import React from 'react';\nimport './App.scss';\nimport Body from './Body/Body';\nimport Footer from './Footer/Footer';\nimport Header from './Header/Header';\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body />\n      <Footer />\n    </div>\n  );\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App.tsx';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"bodyComponent_textarea__2AEVB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"area\":\"textarea_area__1mQmu\",\"title\":\"textarea_title__3f-Ka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Body_grid__2Eze4\",\"left\":\"Body_left__3afN_\",\"rightTop\":\"Body_rightTop__x95CP\",\"rightBottom\":\"Body_rightBottom__2q8gj\"};"],"sourceRoot":""}