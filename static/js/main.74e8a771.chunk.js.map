{"version":3,"sources":["App/Body/bodyComponent.module.scss","App/Body/textarea.module.scss","App/Header/Header.tsx","App/Logic/querys.ts","App/Logic/grammar.ts","App/Body/Textarea.tsx","App/Body/RulesInput.tsx","App/Body/TextInput.tsx","App/Body/GrammarOutput.tsx","App/Body/Body.tsx","App/Footer/Footer.tsx","App/App.tsx","serviceWorker.js","index.js","App/App.module.scss","App/Body/GrammarOutput.module.scss"],"names":["module","exports","Header","props","className","title","isInit","query","vars","grammarUpdateCB","Query","createContainer","useState","rules","setRules","input","setInput","updateQuery","parsed","queryString","parse","window","location","hash","addEventListener","updateQueryString","stringify","updateRules","r","updateInput","i","ruleMatchFCS","nonTerminalMatchFCS","branchMatch","escapeMatch","EXP_DEPTH","grammar","dict","maxDepth","localStorage","getItem","this","lines","split","regexp","length","line","trim","match","error","console","log","newbranches","bmatch","lastIndex","exec","before","substring","index","push","branchString","after","concat","rule","j","branch","newbranch","string","replace","expand","startsym","start","depth","lastSym","debug","slice","msg","gen","Textarea","id","uniqueString","styles","area","htmlFor","onChange","draggable","placeholder","value","aria-label","aria","children","timeout","TIMEOUT","RulesInput","useContainer","status","statusSet","buttonDisabled","buttonDisable","loadRules","setTimeout","textarea","e","target","clearTimeout","onClick","blur","disabled","TextInput","NUM_KEY","GrammarOutput","state","stringEls","number","stringnum","stringGen","undefined","grammarUpdated","bind","updateGenerator","clickGenerate","clickClear","updateNum","updateStrings","resetStrings","n","initialStrings","toString","expandGenerator","tagName","newstrings","str","next","done","val","setState","setItem","strings","map","ind","key","stylesBody","type","size","React","Component","Body","Provider","grid","Footer","year","Date","getFullYear","source","process","Fragment","href","rel","App","grid1","grid2","grid3","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74e8a771.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"bodyComponent_textarea__2AEVB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"area\":\"textarea_area__1mQmu\",\"title\":\"textarea_title__3f-Ka\"};","import React from 'react';\n\n\ninterface Props {\n  className?: string;\n}\n\nfunction Header(props: Props) {\n  return (\n    <header\n      className={`${props.className?props.className:''} App-header`}\n    >\n      <h1>\n        <abbr title=\"Context-free grammar\">CFG</abbr> Testing suite\n      </h1>\n    </header>\n  );\n}\n\nexport default Header;","import queryString from 'query-string';\nimport { useState } from 'react';\nimport { createContainer } from 'unstated-next';\n\n\ninterface AnyObject {\n  [key: string]: string\n}\n\nlet isInit = false;\nconst query: AnyObject = {};\n\nexport const vars = { grammarUpdateCB: () => {} };\n\nconst useQuery = () => {\n  let [rules, setRules] = useState(\"\");\n  let [input, setInput] = useState(\"\");\n\n  const updateQuery = () => {\n    let parsed = queryString.parse(window.location.hash);\n\n    query.rules =\n      typeof(parsed.rules) === \"string\" ? parsed.rules : \"\" as string;\n    setRules(query.rules);\n\n    query.input =\n      typeof(parsed.input) === \"string\" ? parsed.input : \"\" as string;\n    setInput(query.input);\n  }\n\n  // Add event handlers exactly once\n  if (!isInit) {\n    window.addEventListener('hashchange', updateQuery, false);\n    //window.addEventListener('load', updateQuery, false);\n    updateQuery();\n    isInit = true;\n  }\n\n  const updateRules = (r: string) => {\n    query.rules = r;\n    setRules(r);\n    updateQueryString();\n  }\n  const updateInput = (i: string) => {\n    query.input = i;\n    setInput(i);\n    updateQueryString();\n  }\n  const updateQueryString = () => {\n    if (rules !== query.rules || input !== query.input)\n      window.location.hash = queryString.stringify(query);\n  }\n\n  return { rules, updateRules, input, updateInput }\n}\nconst Query = createContainer(useQuery);\n\nexport default Query;","\nconst ruleMatchFCS = /^\\s*([A-Z])\\s*(?:->|→)\\s*(.*)$/;\nconst nonTerminalMatchFCS = /(\\\\*)([A-Z])/g;\n\nconst branchMatch = /(\\\\*)\\|/g;\nconst escapeMatch = /(\\\\(?:n|r|t|f))|\\\\(.)/g;\n\nexport const EXP_DEPTH = 'cfg_maxdepth'; // too prevent infinite recursion\nclass Grammar {\n  rules = [] as ((string|number)[]|string)[][];\n  dict = {} as { [key:string]: number };\n  maxDepth = +(window.localStorage.getItem(EXP_DEPTH) || 15);\n\n  loadRules(rules: string): { error: boolean, line?: number } {\n    this.rules = [];\n    const lines = rules.split(/\\r\\n|\\r|\\n/g);\n    this.dict = {};\n\n    const regexp = ruleMatchFCS;\n\n    // parse rules into arrays\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      if (line.trim() === \"\") continue; // ignore empty lines\n      \n      const match = line.match(regexp);\n\n      if (!match) {\n        const error = { error: true, line: i+1 };\n        console.log(error);\n        return error;\n      }\n\n      let newbranches = [] as string[],\n        bmatch,\n        lastIndex = 0;\n      while ((bmatch = branchMatch.exec(match[2])) !== null) {\n        // even number of backslashes means they are not\n        // escaping the |\n        if (bmatch[1].length % 2 === 0) {\n          let before = match[2].substring(lastIndex, bmatch.index + bmatch[1].length);\n          newbranches.push(this.branchString(before));\n          lastIndex = branchMatch.lastIndex;\n        }\n      }\n      const after = match[2].substring(lastIndex);\n      newbranches.push(this.branchString(after));\n\n      // each non-terminal receives an id (index)\n      // save ids via hashtable\n      let index: number;\n      if (match[1] in this.dict) {\n        index = this.dict[match[1]];\n        this.rules[index] = this.rules[index].concat(newbranches);\n      } else {\n        index = this.rules.length;\n        this.dict[match[1]] = index;\n        this.rules.push(newbranches);\n      }\n    }\n\n    // check for non-terminals in rules\n    for (let i = 0; i < this.rules.length; i++) {\n      const rule = this.rules[i];\n      for (let j = 0; j < rule.length; j++) {\n        const branch = rule[j] as string,\n          regexp = nonTerminalMatchFCS;\n        let match,\n          newbranch = [],\n          lastIndex = 0;\n\n        while ((match = regexp.exec(branch)) !== null) {\n          // even number of backslashes means they are not\n          // escaping the non-terminal\n          if (match[1].length % 2 === 0 && match[2] in this.dict) {\n            const before = branch.substring(lastIndex, match.index);\n            if (before !== \"\") newbranch.push(before);\n            newbranch.push(this.dict[match[2]]);\n            lastIndex = regexp.lastIndex;\n          }\n        }\n        const after = branch.substring(lastIndex);\n        if (after !== \"\") newbranch.push(after);\n\n        if (!newbranch.length) newbranch.push(\"\");\n\n        rule[j] = newbranch;\n      }\n    }\n\n    return { error: false };\n  }\n\n  branchString(string: string) {\n    return string === \"^\" || string === \"\" ? \"\" : // symbols for empty\n      string.replace(escapeMatch, \"$1$2\"); // unescape\n  }\n\n  expandGenerator(startsym = 'S') {\n    let grammar = this;\n    function* expand(\n      start: string|number,\n      rules: (string|number)[],\n      string: string,\n      depth: number,\n      lastSym: string|number\n    ): Generator {\n      if (depth > grammar.maxDepth) {\n        console.debug('max depth');\n        return;\n      }\n      // non-terminal\n      if (typeof(start) === \"number\" && start in grammar.rules) {\n        const rule = grammar.rules[start];\n        for (let j = 0; j < rule.length; j++) {\n          const branch = rule[j] as (string|number)[];\n          //const maxrules = grammar.maxDepth-branch.length-depth;\n\n          if (branch[0] === lastSym) continue;\n\n          // prepend the branch's rules to the remaining ones\n          // TODO: see tree diagram\n          yield* expand(\n            branch[0],\n            [\n              ...branch.slice(1),\n              ...rules//.slice(0, maxrules >= 0 ? maxrules : 0)\n            ],\n            string,\n            depth + (typeof(branch[0]) === \"number\" ? 0 : 1),\n            start\n          );\n        }\n      } else {\n        if (rules.length) {\n          // add terminal symbol to end of string and go on\n          yield* expand(\n            rules[0],\n            rules.slice(1),\n            string + start,\n            depth,\n            start\n          );\n        } else {\n          // leaf node - offer complete string\n          yield string + start;\n        }\n      }\n    }\n\n    const start = (startsym in this.dict ? this.dict[startsym] : -1);\n    if (start === -1) {\n      return { error: true, msg: \"Symbol not found\" };\n    }\n    return { error: false, gen: expand(start, [], \"\", 0, -1) };\n  }\n}\nconst grammar = new Grammar();\n(window as {[key:string]:any}).grammar = grammar;\n\nexport default grammar;","import React from 'react';\nimport uniqueString from 'unique-string';\n\nimport styles from './textarea.module.scss';\n\n\ninterface Props {\n  className?: string;\n  title?: string;\n  placeholder?: string;\n  onChange?: ((event: React.ChangeEvent<HTMLTextAreaElement>) => void);\n  value?: string;\n  aria?: string;\n  children?: JSX.Element[] | JSX.Element;\n}\n\nfunction Textarea(props: Props) {\n  let id = uniqueString();\n  return (\n    <div className={`${styles.area} ${props.className?props.className:''}`}>\n      {props.title && (\n        <h2 className={styles.title}>\n          <label htmlFor={id}>{props.title}</label>\n        </h2>\n      )}\n      <textarea\n        id={id}\n        className=\"textarea monospace\"\n        onChange={props.onChange}\n        draggable=\"false\"\n        placeholder={props.placeholder?props.placeholder:\"Enter text here...\"}\n        value={props.value}\n        aria-label={props.aria}\n      ></textarea>\n      {props.children && (\n        <div className=\"children\">\n          {props.children}\n        </div>\n      )}\n    </div>\n  )\n}\nexport default Textarea;","import React, { useState } from 'react';\n\nimport styles from './bodyComponent.module.scss';\n\nimport Query, { vars } from '../Logic/querys';\nimport grammar from '../Logic/grammar';\nimport Textarea from './Textarea';\n\n\ninterface Props {\n  className?: string;\n}\n\nlet timeout = 0;\nconst TIMEOUT = 400;\nfunction RulesInput(props: Props) {\n  let query = Query.useContainer();\n  let [status, statusSet] = useState([\"ok\",\"\"]);\n  let [buttonDisabled, buttonDisable] = useState(false);\n  let rules = \"\";\n\n  const rulesChange = (e: React.ChangeEvent) => {\n    rules = (e.target as HTMLInputElement).value;\n    query.updateRules(rules);\n    buttonDisable(true);\n    statusSet([\"ok\",\"\"]);\n\n    window.clearTimeout(timeout);\n    timeout = window.setTimeout(loadRules, TIMEOUT);\n  }\n\n  const clickGenerate = (e: React.MouseEvent) => {\n    (e.target as HTMLElement).blur();\n    buttonDisable(true);\n    loadRules();\n  }\n\n  const loadRules = () => {\n    buttonDisable(false);\n    const error = grammar.loadRules(rules);\n    vars.grammarUpdateCB();\n    if (error.error) {\n      statusSet([\"error\",\"Error on line \"+error.line]);\n    } else {\n      statusSet([\"\",\"\"]);\n    }\n  }\n\n  if (timeout === 0 && query.rules !== \"\") {\n    rules = query.rules;\n    timeout = window.setTimeout(loadRules, 1);\n  }\n\n  return (\n    <div\n      className={`${props.className?props.className:''} status-${status[0]} App-bodyComponent`}\n    >\n      <Textarea\n        className={styles.textarea}\n        value={query.rules}\n        onChange={rulesChange}\n        title=\"Rules\"\n        aria=\"Rules that describe the grammar\"\n      >\n        <div className=\"row1\">\n          <span className=\"status\">\n            {status[1]}\n          </span>\n        </div>\n        <div className=\"row2\">\n          <button\n            className=\"button secondary\"\n            onClick={clickGenerate}\n            disabled={buttonDisabled}\n          >\n            Regenerate Model\n          </button>\n        </div>\n      </Textarea>\n    </div>\n  )\n}\nexport default RulesInput;","import React, { useState } from 'react';\n\nimport styles from './bodyComponent.module.scss';\n\nimport Query from '../Logic/querys';\nimport Textarea from './Textarea';\n\n\ninterface Props {\n  className?: string;\n}\n\nfunction TextInput(props: Props) {\n  let query = Query.useContainer();\n  let [status, statusSet] = useState(\"Matching is not implemented yet\");\n  let [buttonDisabled, buttonDisable] = useState(false);\n\n  const inputChange = (e: React.ChangeEvent) =>\n    query.updateInput((e.target as HTMLInputElement).value);\n  \n  const clickMatch = (e: React.MouseEvent) => {\n    (e.target as HTMLElement).blur();\n  }\n\n  return (\n    <div\n      className={`${props.className?props.className:''} App-bodyComponent`}\n    >\n      <Textarea\n        className={styles.textarea}\n        value={query.input}\n        onChange={inputChange}\n        title=\"Test Input\"\n        aria=\"Input to match with grammar\"\n      >\n        <div className=\"row1\">\n          <span className=\"status\">\n            {status}\n          </span>\n        </div>\n        <div className=\"row2\">\n          <button\n            className=\"button secondary\"\n            onClick={clickMatch}\n            disabled={buttonDisabled}\n          >\n            Re-Match\n          </button>\n        </div>\n      </Textarea>\n    </div>\n  )\n}\nexport default TextInput;","import React from 'react';\n\nimport styles from './GrammarOutput.module.scss';\nimport stylesBody from './bodyComponent.module.scss';\nimport textarea from './textarea.module.scss';\n\nimport { vars } from '../Logic/querys';\nimport grammar from '../Logic/grammar';\n\n\ninterface Props {\n  className?: string;\n  initialStrings?: string[];\n}\n\nconst NUM_KEY = 'cfg_gen_number';\nclass GrammarOutput extends React.Component<Props, {}> {\n  state = {\n    stringEls: [] as JSX.Element[],\n    buttonDisabled: false,\n    number: 0\n  };\n  stringnum = 0;\n  stringGen: Generator | undefined = undefined;\n\n  constructor(props: Props) {\n    super(props);\n    this.grammarUpdated = this.grammarUpdated.bind(this);\n    this.updateGenerator = this.updateGenerator.bind(this);\n    this.clickGenerate = this.clickGenerate.bind(this);\n    this.clickClear = this.clickClear.bind(this);\n    this.updateNum = this.updateNum.bind(this);\n    this.updateStrings = this.updateStrings.bind(this);\n    this.resetStrings = this.resetStrings.bind(this);\n\n    let n = +(window.localStorage.getItem(NUM_KEY) || 15);\n    this.state.number = n >= 1 ? n : 1;\n\n    vars.grammarUpdateCB = this.grammarUpdated;\n  }\n\n  componentDidMount() {\n    let initialStrings = [\n      \"some extra long string to test some things lorem ipsum and whatever... this is still the first line actually\\nnewline\"\n    ];\n    for (let i = 0; i < 20; i++) initialStrings.push(i.toString());\n    this.updateStrings(this.props.initialStrings || initialStrings);\n  }\n\n  grammarUpdated() {\n    this.resetStrings();\n    this.updateGenerator();\n  }\n\n  updateGenerator() {\n    let gen = grammar.expandGenerator();\n    if (gen.error) {\n      console.error(gen.error);\n      return;\n    }\n    this.stringGen = gen.gen;\n  }\n\n  clickGenerate(e: React.MouseEvent) {\n    if (!e.target) return;\n    let target = e.target as HTMLElement;\n    \n    if (target.tagName === \"INPUT\") return;\n    target.blur();\n\n    if (!this.stringGen) return;\n\n    let newstrings = [] as string[];\n    for (let i = 0; i < this.state.number; i++) {\n      let str = this.stringGen.next();\n      if (str.done) break;\n      newstrings.push(str.value as string);\n    }\n    \n    this.updateStrings(newstrings);\n  }\n\n  clickClear(e: React.MouseEvent) {\n    if (!e.target) return;\n    (e.target as HTMLElement).blur();\n\n    this.resetStrings();\n    this.updateGenerator();\n  }\n\n  updateNum(e: React.ChangeEvent) {\n    let val = +(e.target as HTMLInputElement).value;\n    this.setState({number: val >= 1 ? val : 1});\n    window.localStorage.setItem(NUM_KEY, val.toString());\n  }\n\n  updateStrings(newstrings: string[]) {\n    let strings = newstrings.map((str, ind) => (\n      <li key={this.stringnum++} className=\"monospace\">\n        {str.toString().split(/\\r\\n|\\r|\\n|\\\\n/g).map((val, key) => (\n          <span key={key}>{val}</span>\n        ))}\n      </li>\n    ));\n    this.setState({stringEls: [...this.state.stringEls, ...strings]});\n  }\n\n  resetStrings() {\n    this.stringnum = 0;\n    this.setState({stringEls: []});\n  }\n\n  render() {\n    return (\n      <div\n        className={`${this.props.className?this.props.className:''} App-bodyComponent`}\n      >\n        <div className={`${textarea.area} ${stylesBody.textarea}`}>\n          <h2 className={textarea.title}>Strings</h2>\n          <div className={styles.strings}>\n            <ul>\n              {this.state.stringEls}\n            </ul>\n          </div>\n          <div className=\"children\">\n            <button\n              className=\"button secondary\"\n              onClick={this.clickGenerate}\n              disabled={this.state.buttonDisabled}\n              aria-label=\"Get more strings\"\n            >\n              Get <input\n                type=\"number\"\n                className=\"input secondary_alt\"\n                size={4}\n                value={this.state.number}\n                onChange={this.updateNum}\n                aria-label=\"Number of strings to get\"\n                /> more\n            </button>\n            <button\n              className=\"button secondary\"\n              onClick={this.clickClear}\n              aria-label=\"Clear strings\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default GrammarOutput;","import React from 'react';\nimport Query from '../Logic/querys';\n\nimport RulesInput from './RulesInput';\nimport TextInput from './TextInput';\nimport GrammarOutput from './GrammarOutput';\n\n\ninterface Props {\n  className?: string;\n  grid: string[];\n}\n\nfunction Body(props: Props) {\n  return (\n    <div\n      className={props.className}\n    >\n      <Query.Provider>\n        <RulesInput\n          className={props.grid[0]}\n        ></RulesInput>\n        <TextInput\n          className={props.grid[1]}\n        ></TextInput>\n        <GrammarOutput\n          className={props.grid[2]}\n        ></GrammarOutput>\n      </Query.Provider>\n    </div>\n  )\n}\nexport default Body;","import React from 'react';\n\n\ninterface Props {\n  className?: string;\n}\n\nfunction Footer(props: Props) {\n  const year = (new Date()).getFullYear().toString(),\n    beginyear = process.env.REACT_APP_BEGIN_YEAR,\n    author = process.env.REACT_APP_AUTHOR,\n    source = process.env.REACT_APP_GITHUB_URL,\n    divider = \" :: \";\n\n  return (\n    <footer\n      className={`${props.className?props.className:''} App-footer`}\n    >\n      {!beginyear || year === beginyear ? year : `${beginyear}-${year}`}\n      {author && ` by ${author}`}\n      {source && (\n        <React.Fragment>\n          <span>{divider}</span>\n          <a href={source} target=\"_blank\" rel=\"noopener noreferrer\">Source</a>\n        </React.Fragment>\n      )}\n    </footer>\n  );\n}\nexport default Footer;","import React from 'react';\nimport './App.scss';\nimport styles from './App.module.scss';\n\nimport Header from './Header/Header';\nimport Body   from './Body/Body';\nimport Footer from './Footer/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Body\n        className={styles.grid}\n        grid={[styles.grid1, styles.grid2, styles.grid3]}\n      ></Body>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"App_grid__2VrY5\",\"grid1\":\"App_grid1__2oQkD\",\"grid2\":\"App_grid2__3nSqq\",\"grid3\":\"App_grid3__1XHgO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"strings\":\"GrammarOutput_strings__syveZ\"};"],"sourceRoot":""}