{"version":3,"sources":["App/Logic/querys.ts","App/Logic/util.ts","App/Body/GrammarOutput.tsx","App/Logic/grammartypes.ts","App/Logic/set.ts","App/Logic/grammar.ts","App/Logic/fcsgrammar.ts","App/Body/Textarea.tsx","App/Body/RulesInput.tsx","App/Body/TextInput.tsx","App/Body/Body.tsx","App/Footer/Footer.tsx","App/Header/Header.tsx","App/App.tsx","serviceWorker.js","index.js","App/Body/bodyComponent.module.scss","App/Body/textarea.module.scss","App/Body/Body.module.scss","App/Body/GrammarOutput.module.scss"],"names":["Query","createContainer","initialQuery","parseQ","query","parsed","parse","rules","input","useState","state","setState","undefined","grammar","setGrammar","setRules","useCallback","nr","setInput","ni","updateQuery","useEffect","update","window","location","hash","addEventListener","removeEventListener","timeout","useRef","current","setTimeout","stringify","clearTimeout","clamp","val","min","max","Math","NUM_KEY","n","localStorage","getItem","GrammarOutput","className","useContainer","Set","strings","setStrings","buttonDisabled","setButtonDisabled","number","setNumber","status","setStatus","grammarUpdated","checkValid","clear","err","stringEls","useMemo","values","map","str","ind","split","key","styles","empty","textarea","area","stylesBody","title","role","onClick","e","target","tagName","blur","checkClick","i","hasWarn","startSize","size","next","Error","message","add","disabled","type","value","onChange","setItem","toString","GSymbol","symbol","NonTerminal","other","this","Symbol","toStringTag","Terminal","sym","EmptySymbol","isEmpty","char","QueueElement","rule","before","depth","nonTerminals","ParseState","left","after","origin","cur","r","prev","reduce","Parse","handle","currentSymbol","currentInput","whitespace","iterator","ComparableSet","keys","Map","bind","set","delete","callbackfn","thisArg","forEach","v","_","__","call","has","t","f","control","nonTerminal","escape","FCSGrammar","parseRules","parseLeft","extractTerminals","literal","match","currentState","parseIndicator","parseBranches","nchar","checkBranch","length","push","construct","splice","initGenerator","gen","maxDepth","maxNonTerms","maxIter","findIndex","s","start","line","column","console","debug","endLine","ignoreWhitespace","toSpecial","checkParseValid","startsym","generator","g","iterSinceYield","queue","shift","expandTerminal","expandNonTerminal","applicable","nrule","top","topc","k","isFinished","completer","isNonTerminal","predictor","isTerminal","scanner","ns","equals","nextInRule","slice","l","Textarea","id","placeholder","aria","children","id_","uniqueString","htmlFor","draggable","RulesInput","loadRules","TextInput","res","matches","Body","grid","Provider","initialState","rightTop","rightBottom","Footer","year","Date","getFullYear","beginyear","process","author","source","Fragment","href","rel","Header","App","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.15c84e7f.chunk.js","sourcesContent":["import { stringify, parse } from 'query-string';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { createContainer } from 'unstated-next';\nimport type { Grammar } from './grammar';\n\ndeclare global {\n  interface Window {\n    grammar: Grammar | undefined;\n  }\n}\n\nconst useQuery = (initialQuery = \"\") => {\n  const parseQ = (query: string) => {\n    const parsed = parse(query);\n    const nr = typeof(parsed.rules) === \"string\" ? parsed.rules : \"\";\n    const ni = typeof(parsed.input) === \"string\" ? parsed.input : \"\";\n    return { rules: nr, input: ni };\n  };\n\n  const [state, setState] = useState(parseQ(initialQuery));\n  const [grammar, setGrammar] = useState(undefined as Grammar | undefined);\n\n  const setRules = useCallback((nr: string) => setState({ ...state, rules: nr }), [state, setState]);\n  const setInput = useCallback((ni: string) => setState({ ...state, input: ni }), [state, setState]);\n  const updateQuery = useCallback((query: string) => setState(parseQ(query)), [setState]);\n\n  // detect hash changes, cleanup listener on unmount\n  useEffect(() => {\n    const update = () => updateQuery(window.location.hash);\n    window.addEventListener('hashchange', update);\n    return () => window.removeEventListener('hashchange', update);\n  }, [updateQuery]);\n  \n  // reflect changes in hash, debounce\n  const timeout = useRef(0);\n  useEffect(() => {\n    timeout.current = window.setTimeout(() => window.location.hash = stringify(state), 100);\n    return () => window.clearTimeout(timeout.current);\n  }, [state]);\n\n  useEffect(() => {\n    window.grammar = grammar;\n  }, [grammar]);\n\n  return { ...state, setRules, setInput, grammar, setGrammar, updateQuery };\n};\n\nconst Query = createContainer(useQuery);\nexport default Query;","export const clamp = (val: number, min: number, max: number) => Math.min(Math.max(val, min), max);","import React, { useEffect, useMemo, useState } from 'react';\nimport Query from '../Logic/querys';\nimport type { Grammar } from '../Logic/grammar';\nimport { clamp } from '../Logic/util';\nimport stylesBody from './bodyComponent.module.scss';\nimport styles from './GrammarOutput.module.scss';\nimport textarea from './textarea.module.scss';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst NUM_KEY = 'cfg_gen_number';\nconst n_min = 1;\nconst n_max = 999;\nconst n = clamp(+(window.localStorage.getItem(NUM_KEY) || 15), n_min, n_max);\n\nconst checkClick = (e: React.MouseEvent, grammar: Grammar | undefined): grammar is Grammar => {\n  const target = e.target as HTMLElement;\n  \n  if (target.tagName === \"INPUT\") return false;\n  target.blur();\n\n  if (!grammar) return false;\n\n  return true;\n};\n\nconst GrammarOutput = ({ className }: Props) => {\n  const { grammar } = Query.useContainer();\n  const [ strings, setStrings ] = useState(new Set<string>());\n  const [ buttonDisabled, setButtonDisabled ] = useState(false);\n  const [ number, setNumber ] = useState(n);\n  const [ status, setStatus ] = useState([\"\",\"\"]);\n\n  const clickGenerate = (e: React.MouseEvent) => {\n    if (!checkClick(e, grammar))\n      return;\n\n    setButtonDisabled(true);\n    setStatus([\"\", \"\"]);\n\n    let hasWarn = false;\n    let i;\n    const startSize = strings.size;\n    for (i = 0; i < number; i = strings.size - startSize) {\n      const str = grammar.next();\n      if (str === undefined)\n        break;\n      if (str instanceof Error) {\n        hasWarn = true;\n        setStatus([\"warn\", str.message]);\n        break;\n      }\n      strings.add(str);\n    }\n    setStrings(new Set(strings));\n\n    if (i < number && !hasWarn) {\n      setStatus([\"info\", \"Grammar exhausted\"]);\n      return;\n    }\n    setButtonDisabled(false);\n  };\n\n  const clickClear = (e: React.MouseEvent) => {\n    (e.target as HTMLElement).blur();\n\n    grammarUpdated();\n  };\n\n  const updateNum = (e: React.ChangeEvent) => {\n    const val = clamp(+(e.target as HTMLInputElement).value, n_min, n_max);\n    setNumber(val);\n    window.localStorage.setItem(NUM_KEY, val.toString());\n  };\n\n  const grammarUpdated = () => {\n    setStrings(new Set());\n\n    try {\n      grammar?.checkValid();\n      grammar?.clear();\n      setButtonDisabled(false);\n      setStatus([\"\", \"\"]);\n    } catch (err) {\n      setButtonDisabled(true);\n      setStatus([\"error\", `${err}`]);\n    }\n  };\n  useEffect(grammarUpdated, [grammar]);\n\n  const stringEls = useMemo(() => [...strings.values()].map((str, ind) => (\n    <li key={ind} className=\"monospace\">\n      {str.split(/\\r\\n|\\r|\\n|\\\\n/g).map((val, key) => (\n        <span key={key} className={val === '' ? styles.empty : ''}>{val || 'ε'}</span>\n      ))}\n    </li>\n  )), [strings]);\n  \n  return (\n    <div\n      className={`${className || ''} status-${status[0]} App-bodyComponent`}\n      data-testid=\"output\"\n    >\n      <div className={`${textarea.area} ${stylesBody.textarea}`}>\n        <h2 className={textarea.title}>Strings</h2>\n        <div className={styles.strings}>\n          <ul data-testid=\"strings\">\n            {stringEls}\n          </ul>\n        </div>\n        <div className=\"children\">\n          <div className=\"row1\">\n            <span className=\"status\" role=\"status\">\n              {status[1]}\n            </span>\n          </div>\n          <div className=\"row2\">\n            <button\n              className=\"button secondary\"\n              onClick={clickGenerate}\n              disabled={buttonDisabled}\n              aria-label=\"Get more strings\"\n              data-testid=\"generate\"\n            >\n              Get <input\n                type=\"number\"\n                className=\"input secondary_alt\"\n                size={3}\n                value={number}\n                onChange={updateNum}\n                aria-label=\"Number of strings to get\"\n                data-testid=\"number\"\n                /> more\n            </button>\n            <button\n              className=\"button secondary\"\n              onClick={clickClear}\n              aria-label=\"Clear strings\"\n              data-testid=\"clear\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\nexport default GrammarOutput;","import ComparableSet, { Comparable } from \"./set\";\n\nabstract class GSymbol {\n  constructor(public symbol: string) {\n  }\n\n  abstract equals(other: GSymbol): boolean;\n}\nexport class NonTerminal extends GSymbol {\n  equals(other: GSymbol): boolean {\n    return other instanceof NonTerminal && other.symbol === this.symbol;\n  }\n  get [Symbol.toStringTag]() { return \"NonTerminal\" }\n}\nexport class Terminal extends GSymbol {\n  equals(other: GSymbol): boolean {\n    return other instanceof Terminal && other.symbol === this.symbol;\n  }\n  static construct(sym: string) {\n    return EmptySymbol.isEmpty(sym) ? new EmptySymbol() : new Terminal(sym);\n  }\n  get [Symbol.toStringTag]() { return \"Terminal\" }\n}\nexport class EmptySymbol extends Terminal {\n  constructor() {\n    super(\"\");\n  }\n  static isEmpty(char: string) {\n    return char === '' || char === '^' || char === 'ε';\n  }\n  get [Symbol.toStringTag]() { return \"EmptySymbol\" }\n}\n\nexport type AnySymbol = Terminal | NonTerminal | undefined;\nexport type Rule = (Terminal | NonTerminal)[];\n\nexport class QueueElement {\n  constructor(public rule: Rule, public before = \"\", public depth = 0, public nonTerminals = 0) {\n  }\n}\n\nexport class ParseState<Sym extends AnySymbol = AnySymbol> implements Comparable {\n  constructor(public left: NonTerminal, public before: Rule, public symbol: Sym, public after: Rule, public origin: number) {\n    this.left = left;\n    this.before = before;\n    this.symbol = symbol;\n    this.after = after;\n    this.origin = origin;\n  }\n  isFinished(): this is ParseState<undefined> { return this.symbol === undefined || this.symbol instanceof EmptySymbol; }\n  isTerminal(): this is ParseState<Terminal> { return this.symbol instanceof Terminal; }\n  isNonTerminal(): this is ParseState<NonTerminal> { return this.symbol instanceof NonTerminal; }\n\n  hash() {\n    const str = (cur: AnySymbol) => (cur instanceof NonTerminal ? `\\x01${cur.symbol}\\x01` : cur?.symbol || '');\n    const r = (prev: string, cur: AnySymbol) => prev + str(cur);\n    return `${this.left.symbol}→${this.before.reduce(r, '')}\\x02•${str(this.symbol)}${this.after.reduce(r, '')}\\x03,${this.origin}`;\n  }\n}\nexport type ParseStateSet = ComparableSet<ParseState>[];\nexport type InferSym<T extends ParseState> = T extends ParseState<infer U> ? U : never;\nexport type NonNull<T extends ParseState> = ParseState<NonNullable<InferSym<T>>>;\n\nexport type ParseHandle = (char: string, literal: boolean) => void;\nexport class Parse {\n  rule: Rule = [];\n  constructor(public handle: ParseHandle, public currentSymbol?: NonTerminal, public currentInput = '', public whitespace = '') {\n  }\n}\n","export interface Comparable {\n  hash(): string;\n}\n\nclass ComparableSet<V extends Comparable> implements Set<V> {\n  private map: Map<string, V>;\n  clear: () => void;\n  keys: () => IterableIterator<V>;\n  values: () => IterableIterator<V>;\n  [Symbol.iterator]: () => IterableIterator<V>;\n\n  constructor(other?: ComparableSet<V>) {\n    this.map = other ? new Map(other.map) : new Map();\n    this.clear = this.map.clear.bind(this.map);\n    this.keys = this.map.values.bind(this.map);\n    this.values = this.map.values.bind(this.map);\n    this[Symbol.iterator] = this.values;\n  }\n\n  get size() {\n    return this.map.size;\n  }\n  add(value: V): this {\n    this.map.set(value.hash(), value);\n    return this;\n  }\n  delete(value: V): boolean {\n    return this.map.delete(value.hash());\n  }\n  forEach(callbackfn: (value: V, value2: V, set: Set<V>) => void, thisArg?: any): void {\n    this.map.forEach((v, _, __) => callbackfn.call(thisArg, v, v, this), thisArg);\n  }\n  has(value: V): boolean {\n    return this.map.has(value.hash());\n  }\n  entries(): IterableIterator<[V, V]> {\n    const t = this;\n    return (function* () {\n      for (const [, v] of t.map) {\n        yield [v, v] as [V, V];\n      }\n      return undefined;\n    })();\n  }\n  get [Symbol.toStringTag]() { return \"ComparableSet\" };\n}\nexport default ComparableSet;","import { EmptySymbol, NonTerminal, Parse, ParseState, NonNull as ParseStateNonNull, ParseStateSet, QueueElement, Rule, Terminal } from './grammartypes';\nimport ComparableSet from './set';\n\n// eslint-disable-next-line no-control-regex\nexport const control = /[\\u0000-\\u0008\\u000E-\\u001f\\u007f-\\u009F]/; // control except whitespace https://stackoverflow.com/a/46637343/\nexport const whitespace = /\\s/;\n\nconst EXP_DEPTH = 'cfg_maxdepth'; // to prevent infinite recursion\nconst EXP_NONTERM = 'cfg_maxnonterm'; // maximum non-terminals in a row\nconst EXP_ITER = 'cfg_iter'; // maximum iterations between yields per call\n\nexport abstract class Grammar {\n  private gen: Generator<string | Error, undefined, never> | undefined = undefined;\n  private maxDepth = +(window.localStorage.getItem(EXP_DEPTH) || 20);\n  private maxNonTerms = +(window.localStorage.getItem(EXP_NONTERM) || 10);\n  private maxIter = +(window.localStorage.getItem(EXP_ITER) || 5000);\n  protected currentState: Parse;\n\n  protected rules: { [key: string]: Rule[] } = {};\n  abstract clear(): void;\n  abstract matches(str: string): boolean;\n  protected abstract checkParseValid(): void;\n\n  constructor() {\n    this.currentState = new Parse(() => { /* */ });\n  }\n  \n  next(): string | Error | undefined {\n    if (!this.gen)\n      throw new Error(\"Attempted to call .next without a generator, this should never happen!\");\n    return this.gen.next().value;\n  }\n  \n  checkValid(): void {\n    // these are internal sanity checks, they should indeed never happen ;)\n    for (const sym in this.rules) {\n      const rules = this.rules[sym];\n      for (const rule of rules) {\n        if (rule.length === 0)\n          throw new Error('Empty rule, this should never happen!');\n        if (rule.length === 1 && rule[0].symbol === '' && !(rule[0] instanceof EmptySymbol))\n          throw new Error('Empty symbol that isn\\'t an EmptySymbol, this should never happen!');\n        if (rule.length > 1 && rule.findIndex(s => s instanceof EmptySymbol || s.symbol.length === 0) !== -1)\n          throw new Error('EmptySymbol found in a longer rule, this should never happen!');\n      }\n    }\n  }\n\n  protected parseRules(rules: string, start: Parse, escape: string | RegExp) {\n    this.currentState = start;\n\n    let line = 0, column = 0;\n    let literal = false;\n    try {\n      for (let i = 0; (column++, i < rules.length); i++) {\n        const char = rules[i];\n        if (char.match(control))\n          console.debug(`Purged control character ${char} at ${i}`);\n        else if (char.match(escape))\n          literal = true;\n        else if (char === '\\n') {\n          column = 0;\n          line ++;\n          if (!literal)\n            this.endLine(start);\n        } else {\n          this.currentState.handle.call(this, char, literal);\n          literal = false;\n        }\n      }\n      this.endLine(start);\n    } catch (e) {\n      throw new Error(`${(e as Error).message} at line ${line + 1}, column ${column}`);\n    }\n  }\n\n  protected checkBranch(char: string, literal: boolean, ignoreWhitespace: boolean) {\n    if (this.currentState.currentInput === '' && !literal && !ignoreWhitespace && char.match(whitespace))\n      return null;\n    if (char === '|' && !literal) {\n      this.endLine();\n      return null;\n    }\n    if (char.match(whitespace)) {\n      this.currentState.whitespace += char;\n      return null;\n    }\n    if (literal)\n      return this.toSpecial(char);\n    return char;\n  }\n\n  private toSpecial(char: string) {\n    if (char === 'n')\n      return '\\n';\n    if (char === 't')\n      return '\\t';\n    if (char === 'r')\n      return '\\r';\n    if (char === 'f')\n      return '\\f';\n    return char;\n  }\n\n  private endLine(start?: Parse) {\n    this.checkParseValid();\n    if (this.currentState.currentSymbol === undefined)\n      return;\n    const s = this.currentState.currentSymbol.symbol;\n    const t = Terminal.construct(this.currentState.currentInput);\n    if (this.currentState.rule.length === 0 || !(t instanceof EmptySymbol))\n      this.currentState.rule.push(t);\n    if (s in this.rules)\n      this.rules[s].push(this.currentState.rule);\n    else\n      this.rules[s] = [this.currentState.rule];\n    if (start)\n      this.currentState = start;\n    else {\n      this.currentState.currentInput = '';\n      this.currentState.whitespace = '';\n      this.currentState.rule = [];\n    }\n  }\n\n  protected initGenerator(startsym: string) {\n    const g = this;\n    let iterSinceYield = 0;\n    // search all possible paths using BFS\n    function* generator(queue: QueueElement[]): Generator<string | Error, undefined, never> {\n      let next: QueueElement | undefined;\n      while ((next = queue.shift())) {\n        iterSinceYield ++;\n        let symbol = g.expandTerminal(next);\n        const { rule, before, depth, nonTerminals } = next;\n        if (symbol === undefined) { // no more symbols to process\n          yield before;\n          iterSinceYield = 0;\n          continue;\n        }\n        if (iterSinceYield >= g.maxIter) {\n          yield new Error(`Iterated ${iterSinceYield} times without finding a new value`);\n          iterSinceYield = 0;\n        }\n        if (depth > g.maxDepth || nonTerminals > g.maxNonTerms)\n          continue;\n        g.expandNonTerminal(symbol, rule, queue, next);\n      }\n      return undefined;\n    }\n    this.gen = generator([new QueueElement([new NonTerminal(startsym)])]);\n  }\n\n  private expandTerminal(next: QueueElement) {\n    const rule = next.rule\n    let symbol = rule.shift();\n    while (symbol instanceof Terminal) { // string all terminals together\n      next.before += symbol.symbol;\n      symbol = rule.shift();\n      next.nonTerminals = 0;\n    }\n    return symbol;\n  }\n\n  private expandNonTerminal(symbol: Terminal, rule: Rule, queue: QueueElement[], next: QueueElement) {\n    const { before, depth, nonTerminals } = next;\n    // create a new branch for every possible path\n    const applicable = this.rules[symbol.symbol];\n    for (const nrule of applicable)\n      queue.push(new QueueElement([...nrule, ...rule], before, depth + 1, nonTerminals + 1));\n  }\n\n  protected match(str: string, startsym: string): boolean {\n    // https://en.wikipedia.org/wiki/Earley_parser#Pseudocode\n    const state: ParseStateSet = [];\n    state.push(new ComparableSet());\n    const top  = new ParseState(new NonTerminal(''), [], new NonTerminal(startsym), [], 0);\n    const topc = new ParseState(new NonTerminal(''), [new NonTerminal(startsym)], undefined, [], 0);\n    state[0].add(top);\n\n    // for each 'word'\n    for (let k = 0; k <= str.length; k++) { // need to finish up after the last character\n      state.push(new ComparableSet()); // k+1\n\n      for (const s of state[k]) { // state[k] can expand\n        if (s.isFinished()) {\n          this.completer(s, k, state);\n        } else if (s.isNonTerminal()) {\n          this.predictor(s, k, state);\n        } else if (s.isTerminal()) {\n          this.scanner(s, k, state, str);\n        }\n      }\n    }\n\n    return state[str.length].has(topc);\n  }\n\n  private completer(s: ParseState<undefined>, k: number, state: ParseStateSet) {\n    for (const n of state[s.origin]) {\n      if (n.isFinished())\n        continue;\n      const ns = n as ParseStateNonNull<typeof n>;\n      if (ns.symbol.equals(s.left))\n        this.nextInRule(ns, k, state);\n    }\n  }\n\n  private predictor(s: ParseState<NonTerminal>, k: number, state: ParseStateSet) {\n    for (const rule of this.rules[s.symbol.symbol]) {\n      state[k].add(new ParseState(s.symbol, [], rule[0], rule.slice(1), k));\n    }\n  }\n\n  private scanner(s: ParseState<Terminal>, k: number, state: ParseStateSet, str: string) {\n    if (k === str.length) // nothing to scan if we're at the end of the string\n      return;\n    if (str[k] === s.symbol.symbol[0]) {\n      this.nextInRule(s, k + 1, state);\n    }\n  }\n\n  private nextInRule(n: ParseState<Terminal | NonTerminal>, k: number, state: ParseStateSet) {\n    // need to go to next symbol in rule\n    // terminals can be multiple chars long, so pop first, otherwise go to next in rule\n    const before = [...n.before];\n    if (n.symbol instanceof Terminal) {\n      const l = before.length - 1;\n      if (before[l] instanceof Terminal) {\n        before[l] = new Terminal(before[l].symbol + n.symbol.symbol[0]);\n      } else {\n        before.push(new Terminal(n.symbol.symbol[0]));\n      }\n    } else {\n      before.push(n.symbol);\n    }\n\n    if (n.symbol instanceof Terminal && n.symbol.symbol.length > 1) {\n      state[k].add(new ParseState(n.left, before, new Terminal(n.symbol.symbol.slice(1)), [...n.after], n.origin));\n    } else {\n      state[k].add(new ParseState(n.left, before, n.after[0], n.after.slice(1), n.origin));\n    }\n  }\n}\n","import { Grammar, whitespace } from \"./grammar\";\nimport { NonTerminal, Parse, Rule, Terminal } from \"./grammartypes\";\n\nconst nonTerminal = /[A-Z]/;\nconst escape = /[\\\\]/;\n\n\nclass FCSGrammar extends Grammar {\n  constructor(rules: string) {\n    super();\n    this.parseRules(rules, new Parse(this.parseLeft), escape);\n    for (const sym in this.rules) {\n      const r = this.rules[sym];\n      for (const rule of r) {\n        this.extractTerminals(rule);\n      }\n    }\n  }\n\n  private parseLeft(char: string, literal: boolean) {\n    if (char.match(whitespace)) {\n      if (literal)\n        throw new Error(`Unexpected literal '${char}'`);\n      return; // ignore whitespace\n    }\n    if (!char.match(nonTerminal) || this.currentState.currentSymbol !== undefined)\n      throw new Error(`Unexpected '${char}', expected Non-Terminal`);\n    this.currentState = new Parse(this.parseIndicator, new NonTerminal(char));\n  }\n\n  private parseIndicator(char: string, literal: boolean) {\n    if (this.currentState.currentInput === '-') {\n      if (char !== '>')\n        throw new Error(`Expected '>', got '${char}'`);\n      this.currentState = new Parse(this.parseBranches, this.currentState.currentSymbol);\n      return;\n    }\n    if (char.match(whitespace)) {\n      if (literal)\n        throw new Error(`Unexpected literal '${char}'`);\n      return; // ignore whitespace\n    }\n    if (!char.match(/[→-]/))\n      throw new Error(`Expected '->' or '→', got '${char}'`);\n    if (char === '-')\n      this.currentState.currentInput = '-';\n    else\n      this.currentState = new Parse(this.parseBranches, this.currentState.currentSymbol);\n  }\n\n  private parseBranches(char: string, literal: boolean) {\n    const nchar = this.checkBranch(char, literal, this.currentState.rule.length !== 0);\n    if (nchar === null)\n      return;\n    if (char.match(nonTerminal) && !literal) {\n      if (this.currentState.currentInput !== '' || this.currentState.whitespace !== '')\n        this.currentState.rule.push(Terminal.construct(this.currentState.currentInput + this.currentState.whitespace));\n      this.currentState.rule.push(new NonTerminal(nchar));\n      this.currentState.currentInput = '';\n    } else {\n      this.currentState.currentInput += this.currentState.whitespace + nchar;\n    }\n    this.currentState.whitespace = '';\n  }\n\n  protected checkParseValid() {\n    if (this.currentState.handle === this.parseIndicator)\n      throw new Error('Unexpected line ending, expected rule indicator');\n  }\n\n  private extractTerminals(rule: Rule) {\n    // convert all non-existant non-terminals to terminals\n    for (let i = 0; i < rule.length; i++) {\n      if (!(rule[i] instanceof NonTerminal))\n        continue;\n      if (rule[i].symbol in this.rules)\n        continue;\n      rule[i] = new Terminal(rule[i].symbol);\n    }\n    // merge terminals\n    for (let i = rule.length - 1; i > 0; i--) {\n      if (!(rule[i] instanceof Terminal) || !(rule[i - 1] instanceof Terminal))\n        continue;\n      rule[i - 1].symbol += rule[i].symbol;\n      rule.splice(i, 1);\n    }\n  }\n\n  clear() {\n    this.initGenerator('S');\n  }\n\n  checkValid() {\n    super.checkValid();\n    if (!('S' in this.rules))\n      throw new Error(\"Startsymbol 'S' not found\");\n  }\n\n  matches(str: string) {\n    return this.match(str, 'S');\n  }\n}\n\nexport default FCSGrammar;","import React from 'react';\nimport uniqueString from 'unique-string';\nimport styles from './textarea.module.scss';\n\n\ninterface Props {\n  id?: string;\n  className?: string;\n  title?: string;\n  placeholder?: string;\n  onChange?: ((event: React.ChangeEvent<HTMLTextAreaElement>) => void);\n  value?: string;\n  aria?: string;\n  children?: JSX.Element[] | JSX.Element;\n}\n\nconst Textarea = ({ id, className, title, placeholder, onChange, value, aria, children }: Props) => {\n  const id_ = id || uniqueString();\n  return (\n    <div className={`${styles.area} ${className || ''}`} data-testid=\"container\">\n      {title && (\n        <h2 className={styles.title}>\n          <label\n            htmlFor={id_}\n            data-testid=\"label\"\n          >{title}</label>\n        </h2>\n      )}\n      <textarea\n        id={id_}\n        className=\"textarea monospace\"\n        onChange={onChange}\n        draggable=\"false\"\n        placeholder={typeof placeholder === \"string\" ? placeholder : \"Enter text here...\"}\n        value={value}\n        aria-label={aria}\n      ></textarea>\n      {children && (\n        <div className=\"children\">\n          {children}\n        </div>\n      )}\n    </div>\n  )\n};\nexport default Textarea;","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport FCSGrammar from '../Logic/fcsgrammar';\nimport Query from '../Logic/querys';\nimport styles from './bodyComponent.module.scss';\nimport Textarea from './Textarea';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst RulesInput = ({ className }: Props) => {\n  const { rules, setRules, setGrammar } = Query.useContainer();\n  const [ status, setStatus ] = useState([\"\",\"\"]);\n  const timeout = useRef(0);\n\n  const rulesChange = (e: React.ChangeEvent) => {\n    setRules((e.target as HTMLInputElement).value);\n  };\n\n  const clickGenerate = (e: React.MouseEvent) => {\n    (e.target as HTMLElement).blur();\n\n    loadRules();\n  };\n\n  // parse rules, debounced\n  const loadRules = useCallback(() => {\n    timeout.current = window.setTimeout(() => {\n      try {\n        setGrammar(new FCSGrammar(rules));\n        setStatus([\"ok\", \"\"]);\n      } catch (err) {\n        setStatus([\"error\",`${err}`]);\n      }\n    }, 50);\n    return () => window.clearTimeout(timeout.current);\n  }, [rules, setGrammar]);\n\n  useEffect(loadRules, [rules, loadRules]);\n\n  return (\n    <div\n      className={`${className || ''} status-${status[0]} App-bodyComponent`}\n      data-testid=\"rules-input\"\n    >\n      <Textarea\n        className={styles.textarea}\n        value={rules}\n        onChange={rulesChange}\n        title=\"Rules\"\n        aria=\"Rules that describe the grammar\"\n        placeholder=\"Enter rules here... e.g.&#10;S -> 1 | 2 | 3&#10;S -> 4 | 5 | 6\"\n      >\n        <div className=\"row1\">\n          <div className=\"status\" role=\"status\">\n            {status[1]}\n          </div>\n        </div>\n        <div className=\"row2\">\n          <button\n            className=\"button secondary\"\n            onClick={clickGenerate}\n          >\n            Regenerate Model\n          </button>\n        </div>\n      </Textarea>\n    </div>\n  )\n};\nexport default RulesInput;","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Query from '../Logic/querys';\nimport styles from './bodyComponent.module.scss';\nimport Textarea from './Textarea';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst TextInput = ({ className }: Props) => {\n  const { input, setInput, grammar } = Query.useContainer();\n  const [ status, setStatus ] = useState([\"\", \"\"]);\n  const [ buttonDisabled, setButtonDisabled ] = useState(false);\n  const timeout = useRef(0);\n\n  const inputChange = (e: React.ChangeEvent) => {\n    setInput((e.target as HTMLInputElement).value);\n  }\n  \n  const clickMatch = (e: React.MouseEvent) => {\n    (e.target as HTMLElement).blur();\n\n    match();\n  }\n\n  // match input\n  const match = useCallback(() => {\n    try {\n      if (!grammar)\n        throw new Error('No grammar object available');\n      grammar.checkValid();\n      const res = grammar.matches(input);\n      setButtonDisabled(false);\n      setStatus([res ? 'ok' : 'error', `Input ${res ? 'matches' : 'doesn\\'t match'}`]);\n    } catch (err) {\n      setButtonDisabled(true);\n      setStatus([\"error\", `${err}`]);\n    }\n  }, [input, grammar]);\n\n  // debounce matching, on grammar or input change\n  useEffect(() => {\n    timeout.current = window.setTimeout(match, 100);\n    return () => window.clearTimeout(timeout.current);\n  }, [match]);\n\n  return (\n    <div\n      className={`${className || ''} status-${status[0]} App-bodyComponent`}\n      data-testid=\"text-input\"\n    >\n      <Textarea\n        className={styles.textarea}\n        value={input}\n        onChange={inputChange}\n        title=\"Test Input\"\n        aria=\"Input to match with grammar\"\n      >\n        <div className=\"row1\">\n          <span className=\"status\" role=\"status\">\n            {status[1]}\n          </span>\n        </div>\n        <div className=\"row2\">\n          <button\n            className=\"button secondary\"\n            onClick={clickMatch}\n            disabled={buttonDisabled}\n          >\n            Re-Match\n          </button>\n        </div>\n      </Textarea>\n    </div>\n  )\n};\nexport default TextInput;","import React from 'react';\nimport Query from '../Logic/querys';\nimport styles from './Body.module.scss';\nimport GrammarOutput from './GrammarOutput';\nimport RulesInput from './RulesInput';\nimport TextInput from './TextInput';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst Body = ({ className }: Props) => {\n  return (\n    <div\n      className={`${className || ''} ${styles.grid} App-body`}\n    >\n      <Query.Provider initialState={window.location.hash}>\n        <RulesInput\n          className={styles.left}\n        ></RulesInput>\n        <TextInput\n          className={styles.rightTop}\n        ></TextInput>\n        <GrammarOutput\n          className={styles.rightBottom}\n        ></GrammarOutput>\n      </Query.Provider>\n    </div>\n  )\n};\nexport default Body;","import React from 'react';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst Footer = ({ className }: Props) => {\n  const year = (new Date()).getFullYear().toString(),\n    beginyear = process.env.REACT_APP_BEGIN_YEAR,\n    author = process.env.REACT_APP_AUTHOR,\n    source = process.env.REACT_APP_GITHUB_URL,\n    divider = \" :: \";\n\n  return (\n    <footer\n      className={`${className || ''} App-footer`}\n    >\n      {!beginyear || year === beginyear ? year : `${beginyear}-${year}`}\n      {author && ` by ${author}`}\n      {source && (\n        <React.Fragment>\n          <span>{divider}</span>\n          <a href={source} target=\"_blank\" rel=\"noopener noreferrer\">Source</a>\n        </React.Fragment>\n      )}\n    </footer>\n  );\n};\nexport default Footer;","import React from 'react';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst Header = ({ className }: Props) => {\n  return (\n    <header\n      className={`${className || ''} App-header`}\n    >\n      <h1>\n        <abbr title=\"Context-free grammar\">CFG</abbr> Testing suite\n      </h1>\n    </header>\n  );\n};\nexport default Header;","import React from 'react';\nimport './App.scss';\nimport Body from './Body/Body';\nimport Footer from './Footer/Footer';\nimport Header from './Header/Header';\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body />\n      <Footer />\n    </div>\n  );\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App.tsx';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"bodyComponent_textarea__2AEVB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"area\":\"textarea_area__1mQmu\",\"title\":\"textarea_title__3f-Ka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Body_grid__2Eze4\",\"left\":\"Body_left__3afN_\",\"rightTop\":\"Body_rightTop__x95CP\",\"rightBottom\":\"Body_rightBottom__2q8gj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"strings\":\"GrammarOutput_strings__syveZ\",\"empty\":\"GrammarOutput_empty__3tYL_\"};"],"sourceRoot":""}