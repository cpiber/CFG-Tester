{"version":3,"sources":["App/Body/GrammarOutput.module.scss","App/Body/bodyComponent.module.scss","App/Header/Header.tsx","App/Logic/querys.ts","App/Body/Textarea.tsx","App/Logic/sharedgrammar.ts","App/Logic/fcsgrammar.ts","App/Body/RulesInput.tsx","App/Body/TextInput.tsx","App/Body/GrammarOutput.tsx","App/Body/EventManager.tsx","App/Body/Body.tsx","App/Footer/Footer.tsx","App/App.tsx","serviceWorker.js","index.js","App/Body/textarea.module.scss","App/App.module.scss"],"names":["module","exports","Header","props","className","title","Query","createContainer","useState","rules","setRules","input","setInput","undefined","grammar","setGrammar","useEffect","window","location","hash","queryString","stringify","updateQuery","query","parsed","parse","Textarea","id","uniqueString","styles","area","htmlFor","onChange","draggable","placeholder","value","aria","children","branchMatch","escapeMatch","NonTerminal","symbol","this","Terminal","EmptySymbol","QueueElement","rule","before","depth","consecutiveNonTerminals","ruleMatchFCS","nonTerminalMatchFCS","FCSGrammar","lines","split","sym","parseRules","parseNonTerminals","console","debug","regexp","i","length","line","trim","match","Error","lineToError","newbranches","bmatch","lastIndex","exec","substring","index","push","branchToTerminal","after","map","t","j","branch","newbranch","string","replace","indexOf","initGenerator","gen","maxDepth","localStorage","getItem","maxNonTerms","startsym","generator","g","queue","next","shift","applicable","nrule","f","RulesInput","useContainer","status","setStatus","loadRules","useCallback","clearTimeout","setTimeout","r","err","textarea","e","target","onClick","blur","TextInput","buttonDisabled","disabled","NUM_KEY","GrammarOutput","strings","setStrings","setButtonDisabled","n","number","setNumber","grammarUpdated","checkExpandable","clear","stringEls","useMemo","str","ind","toString","val","key","stylesBody","tagName","newstrings","type","size","setItem","hashInit","EventManager","q","addEventListener","Fragment","Body","Provider","grid","Footer","year","Date","getFullYear","beginyear","process","author","source","href","rel","App","grid1","grid2","grid3","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b0f1539.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"strings\":\"GrammarOutput_strings__syveZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"bodyComponent_textarea__2AEVB\"};","import React from 'react';\n\n\ninterface Props {\n  className?: string;\n}\n\nfunction Header(props: Props) {\n  return (\n    <header\n      className={`${props.className?props.className:''} App-header`}\n    >\n      <h1>\n        <abbr title=\"Context-free grammar\">CFG</abbr> Testing suite\n      </h1>\n    </header>\n  );\n}\n\nexport default Header;","import queryString from 'query-string';\nimport { useEffect, useState } from 'react';\nimport { createContainer } from 'unstated-next';\nimport { Grammar } from './sharedgrammar';\n\nconst useQuery = () => {\n  const [rules, setRules] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n  const [grammar, setGrammar] = useState(undefined as Grammar | undefined);\n\n  const updateQuery = (query: string) => {\n    const parsed = queryString.parse(query);\n    \n    setRules(typeof(parsed.rules) === \"string\" ? parsed.rules : \"\" as string);\n    setInput(typeof(parsed.input) === \"string\" ? parsed.input : \"\" as string);\n  };\n\n  useEffect(() => {\n    window.location.hash = queryString.stringify({ rules, input })\n  }, [rules, input]);\n\n  return { rules, setRules, input, setInput, grammar, setGrammar, updateQuery };\n};\n\nconst Query = createContainer(useQuery);\nexport default Query;","import React from 'react';\nimport uniqueString from 'unique-string';\n\nimport styles from './textarea.module.scss';\n\n\ninterface Props {\n  className?: string;\n  title?: string;\n  placeholder?: string;\n  onChange?: ((event: React.ChangeEvent<HTMLTextAreaElement>) => void);\n  value?: string;\n  aria?: string;\n  children?: JSX.Element[] | JSX.Element;\n}\n\nconst Textarea = (props: Props) => {\n  let id = uniqueString();\n  return (\n    <div className={`${styles.area} ${props.className?props.className:''}`}>\n      {props.title && (\n        <h2 className={styles.title}>\n          <label htmlFor={id}>{props.title}</label>\n        </h2>\n      )}\n      <textarea\n        id={id}\n        className=\"textarea monospace\"\n        onChange={props.onChange}\n        draggable=\"false\"\n        placeholder={props.placeholder?props.placeholder:\"Enter text here...\"}\n        value={props.value}\n        aria-label={props.aria}\n      ></textarea>\n      {props.children && (\n        <div className=\"children\">\n          {props.children}\n        </div>\n      )}\n    </div>\n  )\n}\nexport default Textarea;","\nexport const branchMatch = /(\\\\*)\\|/g;\nexport const escapeMatch = /(\\\\(?:n|r|t|f))|\\\\(.)/g;\n\nconst EXP_DEPTH = 'cfg_maxdepth'; // to prevent infinite recursion\nconst EXP_NONTERM = 'cfg_maxnonterm'; // maximum non-terminals in a row\n\ninterface GSymbol {\n  symbol: string;\n}\nexport class NonTerminal implements GSymbol {\n  symbol: string;\n  constructor(symbol: string) {\n    this.symbol = symbol;\n  }\n}\nexport class Terminal implements GSymbol {\n  symbol: string;\n  constructor(symbol: string) {\n    this.symbol = symbol;\n  }\n}\nexport class EmptySymbol extends Terminal {\n  constructor() {\n    super(\"\");\n  }\n}\n\nexport type Rule = (Terminal | NonTerminal)[];\n\nclass QueueElement {\n  rule: Rule;\n  before: string;\n  depth: number;\n  consecutiveNonTerminals: number;\n  constructor(rule: Rule, before = \"\", depth = 0, consecutiveNonTerminals = 0) {\n    this.rule = rule;\n    this.before = before;\n    this.depth = depth;\n    this.consecutiveNonTerminals = consecutiveNonTerminals;\n  }\n}\n\nexport abstract class Grammar {\n  private gen: Generator<string, undefined, never> | undefined = undefined;\n  private maxDepth = +(window.localStorage.getItem(EXP_DEPTH) || 20);\n  private maxNonTerms = +(window.localStorage.getItem(EXP_NONTERM) || 10);\n\n  protected rules: { [key: string]: Rule[] } = {};\n  abstract clear(): void;\n  abstract checkExpandable(): void;\n\n  protected initGenerator(startsym: string) {\n    const g = this;\n    // search all possible paths using BFS\n    function* generator(queue: QueueElement[]): Generator<string, undefined, never> {\n      let next: QueueElement | undefined;\n      while ((next = queue.shift())) {\n        let { rule, before, depth, consecutiveNonTerminals } = next;\n        let symbol = rule.shift();\n        while (symbol instanceof Terminal) { // string all terminals together\n          before += symbol.symbol;\n          symbol = rule.shift();\n          consecutiveNonTerminals = 0;\n        }\n        if (symbol === undefined) { // no more symbols to process\n          yield before;\n          continue;\n        }\n        // create a new branch for every possible path\n        const applicable = g.rules[symbol.symbol];\n        for (const nrule of applicable) {\n          if (nrule[0] instanceof NonTerminal && (depth > g.maxDepth || consecutiveNonTerminals > g.maxNonTerms))\n            continue;\n          queue.push(new QueueElement([...nrule, ...rule], before, depth + 1, consecutiveNonTerminals + 1));\n        }\n      }\n      return undefined;\n    }\n    this.gen = generator([new QueueElement([new NonTerminal(startsym)])]);\n  }\n\n  next(): string | undefined {\n    if (!this.gen)\n      throw new Error(\"Attempted to call .next without a generator, this should never happen!\");\n    return this.gen.next().value;\n  }\n}\n","import { branchMatch, EmptySymbol, escapeMatch, Grammar, NonTerminal, Rule, Terminal } from \"./sharedgrammar\";\n\nconst ruleMatchFCS = /^\\s*([A-Z])\\s*(?:->|→)\\s*(.*)$/;\nconst nonTerminalMatchFCS = /(\\\\*)([A-Z])/g;\n\nclass FCSGrammar extends Grammar {\n  constructor(rules: string) {\n    super();\n    const lines = rules.split(/\\r\\n|\\r|\\n/g);\n    this.parseRules(lines);\n\n    // check for non-terminals in rules\n    for (const sym in this.rules) {\n      this.parseNonTerminals(this.rules[sym]);\n    }\n    console.debug(this.rules);\n  }\n\n  private parseRules(lines: string[]) {\n    const regexp = ruleMatchFCS;\n    // parse rules into arrays\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      if (line.trim() === \"\") continue; // ignore empty lines\n\n      const match = line.match(regexp);\n\n      if (!match)\n        throw new Error(`Syntax error on line ${i + 1}: ${this.lineToError(line)}`);\n\n      let newbranches: Terminal[] = [],\n        bmatch: RegExpExecArray | null,\n        lastIndex = 0;\n      while ((bmatch = branchMatch.exec(match[2])) !== null) {\n        // even number of backslashes means they are not\n        // escaping the |\n        if (bmatch[1].length % 2 === 0) {\n          let before = match[2].substring(lastIndex, bmatch.index + bmatch[1].length);\n          newbranches.push(this.branchToTerminal(before.trim()));\n          lastIndex = branchMatch.lastIndex;\n        }\n      }\n      const after = match[2].substring(lastIndex);\n      newbranches.push(this.branchToTerminal(after.trim()));\n      const rules = newbranches.map(t => [t]);\n\n      // each non-terminal receives an id (index)\n      // save ids via hashtable\n      if (match[1] in this.rules) {\n        this.rules[match[1]].push(...rules);\n      } else {\n        this.rules[match[1]] = rules;\n      }\n    }\n  }\n\n  private parseNonTerminals(rules: Rule[]) {\n    for (let j = 0; j < rules.length; j++) {\n      const branch = rules[j][0].symbol, // currently only 1 terminal symbol, split that\n        regexp = nonTerminalMatchFCS;\n      let match: RegExpExecArray | null,\n        newbranch: Rule = [],\n        lastIndex = 0;\n\n      while ((match = regexp.exec(branch)) !== null) {\n        // even number of backslashes means they are not\n        // escaping the non-terminal\n        if (match[1].length % 2 === 0 && match[2] in this.rules) {\n          const before = branch.substring(lastIndex, match.index);\n          if (before !== \"\") newbranch.push(this.branchToTerminal(before));\n          newbranch.push(new NonTerminal(match[2]));\n          lastIndex = regexp.lastIndex;\n        }\n      }\n      const after = branch.substring(lastIndex).trim();\n      if (after !== \"\") newbranch.push(this.branchToTerminal(after));\n\n      if (!newbranch.length) newbranch.push(new EmptySymbol());\n\n      rules[j] = newbranch;\n    }\n  }\n\n  private branchToTerminal(string: string) {\n    return (\n      string === \"^\" || string === \"ε\" || string === \"\" ?\n        new EmptySymbol() : // symbols for empty\n        new Terminal(string.replace(escapeMatch, \"$1$2\")) // unescape\n    );\n  }\n\n  private lineToError(line: string) {\n    if (line.indexOf(\"->\") === -1 && line.indexOf(\"→\") === -1)\n      return \"Rule indicator '->' missing\";\n    return \"Non-terminal symbols must be single capital letters\";\n  }\n\n  clear() {\n    this.initGenerator('S');\n  }\n\n  checkExpandable() {\n    if (!('S' in this.rules))\n      throw new Error(\"Startsymbol 'S' not found\");\n  }\n\n  next(): string | undefined {\n    return super.next();\n  }\n}\n\nexport default FCSGrammar;","import React, { useCallback, useEffect, useState } from 'react';\n\nimport styles from './bodyComponent.module.scss';\n\nimport Query from '../Logic/querys';\nimport Textarea from './Textarea';\nimport FCSGrammar from '../Logic/fcsgrammar';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst RulesInput = (props: Props) => {\n  const { rules, setRules, setGrammar } = Query.useContainer();\n  const [status, setStatus] = useState([\"\",\"\"]);\n  let timeout = 0;\n\n  const rulesChange = (e: React.ChangeEvent) => {\n    setRules((e.target as HTMLInputElement).value);\n  };\n\n  const clickGenerate = (e: React.MouseEvent) => {\n    (e.target as HTMLElement).blur();\n    loadRules();\n  };\n\n  const loadRules = useCallback(() => {\n    window.clearTimeout(timeout);\n    window.setTimeout((r: string) => {\n      try {\n        setGrammar(new FCSGrammar(r));\n        setStatus([\"\", \"\"]);\n      } catch (err) {\n        setStatus([\"error\",`${err}`]);\n      }\n    }, 10, rules);\n  }, [rules, setGrammar, timeout]);\n\n  useEffect(loadRules, [rules, loadRules]);\n\n  return (\n    <div\n      className={`${props.className?props.className:''} status-${status[0]} App-bodyComponent`}\n    >\n      <Textarea\n        className={styles.textarea}\n        value={rules}\n        onChange={rulesChange}\n        title=\"Rules\"\n        aria=\"Rules that describe the grammar\"\n      >\n        <div className=\"row1\">\n          <div className=\"status\">\n            {status[1]}\n          </div>\n        </div>\n        <div className=\"row2\">\n          <button\n            className=\"button secondary\"\n            onClick={clickGenerate}\n          >\n            Regenerate Model\n          </button>\n        </div>\n      </Textarea>\n    </div>\n  )\n}\nexport default RulesInput;","import React, { useState } from 'react';\n\nimport styles from './bodyComponent.module.scss';\n\nimport Query from '../Logic/querys';\nimport Textarea from './Textarea';\n\n\ninterface Props {\n  className?: string;\n}\n\nconst TextInput = (props: Props) => {\n  let query = Query.useContainer();\n  let [status, /*setStatus*/] = useState(\"Matching is not implemented yet\");\n  let [buttonDisabled, /*setButtonDisabled*/] = useState(false);\n\n  const inputChange = (e: React.ChangeEvent) =>\n    query.setInput((e.target as HTMLInputElement).value);\n  \n  const clickMatch = (e: React.MouseEvent) => {\n    (e.target as HTMLElement).blur();\n  }\n\n  return (\n    <div\n      className={`${props.className?props.className:''} App-bodyComponent`}\n    >\n      <Textarea\n        className={styles.textarea}\n        value={query.input}\n        onChange={inputChange}\n        title=\"Test Input\"\n        aria=\"Input to match with grammar\"\n      >\n        <div className=\"row1\">\n          <span className=\"status\">\n            {status}\n          </span>\n        </div>\n        <div className=\"row2\">\n          <button\n            className=\"button secondary\"\n            onClick={clickMatch}\n            disabled={buttonDisabled}\n          >\n            Re-Match\n          </button>\n        </div>\n      </Textarea>\n    </div>\n  )\n}\nexport default TextInput;","import React, { useEffect, useState, useMemo } from 'react';\n\nimport styles from './GrammarOutput.module.scss';\nimport stylesBody from './bodyComponent.module.scss';\nimport textarea from './textarea.module.scss';\n\nimport Query from '../Logic/querys';\n\n\ninterface Props {\n  className?: string;\n  initialStrings?: string[];\n}\n\nconst NUM_KEY = 'cfg_gen_number';\nconst GrammarOutput = (props: Props) => {\n  const { grammar } = Query.useContainer();\n  const [strings, setStrings] = useState([] as string[]);\n  const [buttonDisabled, setButtonDisabled] = useState(false);\n  const n = +(window.localStorage.getItem(NUM_KEY) || 15);\n  const [number, setNumber] = useState(n >= 1 ? n : 1);\n  const [status, setStatus] = useState([\"\",\"\"]);\n\n  const clickGenerate = (e: React.MouseEvent) => {\n    if (!e.target) return;\n    const target = e.target as HTMLElement;\n    \n    if (target.tagName === \"INPUT\") return;\n    target.blur();\n\n    if (!grammar) return;\n\n    setButtonDisabled(true);\n\n    const newstrings = [] as string[];\n    for (let i = 0; i < number; i++) {\n      const str = grammar.next();\n      if (str === undefined)\n        break;\n      newstrings.push(str);\n    }\n    setStrings([...strings, ...newstrings]);\n\n    if (newstrings.length < number) {\n      setStatus([\"info\", \"Grammmar exhausted\"]);\n      return;\n    }\n    setButtonDisabled(false);\n  };\n\n  const clickClear = (e: React.MouseEvent) => {\n    if (!e.target) return;\n    (e.target as HTMLElement).blur();\n\n    grammarUpdated();\n  };\n\n  const updateNum = (e: React.ChangeEvent) => {\n    const val = +(e.target as HTMLInputElement).value;\n    setNumber(val >= 1 ? val : 1);\n    window.localStorage.setItem(NUM_KEY, val.toString());\n  };\n\n  const resetStrings = () => setStrings([]);\n  const grammarUpdated = () => {\n    resetStrings();\n\n    try {\n      grammar?.checkExpandable();\n      grammar?.clear();\n      setButtonDisabled(false);\n      setStatus([\"\", \"\"]);\n    } catch (err) {\n      setButtonDisabled(true);\n      setStatus([\"error\", `${err}`]);\n    }\n  };\n  useEffect(grammarUpdated, [grammar]);\n\n  const stringEls = useMemo(() => strings.map((str, ind) => (\n    <li key={ind} className=\"monospace\">\n      {str.toString().split(/\\r\\n|\\r|\\n|\\\\n/g).map((val, key) => (\n        <span key={key}>{val}</span>\n      ))}\n    </li>\n  )), [strings]);\n  \n  return (\n    <div\n      className={`${props.className?props.className:''} status-${status[0]} App-bodyComponent`}\n    >\n      <div className={`${textarea.area} ${stylesBody.textarea}`}>\n        <h2 className={textarea.title}>Strings</h2>\n        <div className={styles.strings}>\n          <ul>\n            {stringEls}\n          </ul>\n        </div>\n        <div className=\"children\">\n          <div className=\"row1\">\n            <span className=\"status\">\n              {status[1]}\n            </span>\n          </div>\n          <div className=\"row2\">\n            <button\n              className=\"button secondary\"\n              onClick={clickGenerate}\n              disabled={buttonDisabled}\n              aria-label=\"Get more strings\"\n            >\n              Get <input\n                type=\"number\"\n                className=\"input secondary_alt\"\n                size={4}\n                value={number}\n                onChange={updateNum}\n                aria-label=\"Number of strings to get\"\n                /> more\n            </button>\n            <button\n              className=\"button secondary\"\n              onClick={clickClear}\n              aria-label=\"Clear strings\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default GrammarOutput;","import React from \"react\";\nimport Query from \"../Logic/querys\";\n\nlet hashInit = false;\n\nconst EventManager = () => {\n  const q = Query.useContainer().updateQuery;\n\n  if (!hashInit) {\n    hashInit = true;\n\n    window.addEventListener('hashchange', () => q(window.location.hash));\n    q(window.location.hash);\n  }\n\n  return <React.Fragment />;\n}\nexport default EventManager;","import React from 'react';\nimport Query from '../Logic/querys';\n\nimport RulesInput from './RulesInput';\nimport TextInput from './TextInput';\nimport GrammarOutput from './GrammarOutput';\nimport EventManager from './EventManager';\n\n\ninterface Props {\n  className?: string;\n  grid: string[];\n}\n\nconst Body = (props: Props) => {\n  return (\n    <div\n      className={props.className}\n    >\n      <Query.Provider>\n        <EventManager />\n        <RulesInput\n          className={props.grid[0]}\n        ></RulesInput>\n        <TextInput\n          className={props.grid[1]}\n        ></TextInput>\n        <GrammarOutput\n          className={props.grid[2]}\n        ></GrammarOutput>\n      </Query.Provider>\n    </div>\n  )\n}\nexport default Body;","import React from 'react';\n\n\ninterface Props {\n  className?: string;\n}\n\nfunction Footer(props: Props) {\n  const year = (new Date()).getFullYear().toString(),\n    beginyear = process.env.REACT_APP_BEGIN_YEAR,\n    author = process.env.REACT_APP_AUTHOR,\n    source = process.env.REACT_APP_GITHUB_URL,\n    divider = \" :: \";\n\n  return (\n    <footer\n      className={`${props.className?props.className:''} App-footer`}\n    >\n      {!beginyear || year === beginyear ? year : `${beginyear}-${year}`}\n      {author && ` by ${author}`}\n      {source && (\n        <React.Fragment>\n          <span>{divider}</span>\n          <a href={source} target=\"_blank\" rel=\"noopener noreferrer\">Source</a>\n        </React.Fragment>\n      )}\n    </footer>\n  );\n}\nexport default Footer;","import React from 'react';\nimport './App.scss';\nimport styles from './App.module.scss';\n\nimport Header from './Header/Header';\nimport Body   from './Body/Body';\nimport Footer from './Footer/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Body\n        className={styles.grid}\n        grid={[styles.grid1, styles.grid2, styles.grid3]}\n      ></Body>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"area\":\"textarea_area__1mQmu\",\"title\":\"textarea_title__3f-Ka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"App_grid__2VrY5\",\"grid1\":\"App_grid1__2oQkD\",\"grid2\":\"App_grid2__3nSqq\",\"grid3\":\"App_grid3__1XHgO\"};"],"sourceRoot":""}